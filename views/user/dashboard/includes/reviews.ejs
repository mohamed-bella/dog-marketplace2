<!-- views/partials/reviews.ejs -->
<div class="container mx-auto px-4 py-6" x-data="reviewsData">
    <!-- Header Section -->
    <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
        <div>
            <h1 class="text-2xl font-bold text-neutral-800">Avis sur vos Services</h1>
            <p class="text-neutral-500 mt-1">Gérez et suivez les avis de vos clients</p>
        </div>

        
    </div>

    <!-- Stats Overview -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-white rounded-lg p-4 border border-neutral-100">
            <div class="text-sm text-neutral-500">Total des avis</div>
            <div class="text-2xl font-semibold mt-1"><%= reviews.length %></div>
        </div>
        <div class="bg-white rounded-lg p-4 border border-neutral-100">
            <div class="text-sm text-neutral-500">Note moyenne</div>
            <div class="text-2xl font-semibold mt-1 flex items-center">
                <%= (reviews.reduce((acc, rev) => acc + rev.rating, 0) / reviews.length).toFixed(1) %>
                <i class="fas fa-star text-yellow-400 ml-2 text-lg"></i>
            </div>
        </div>
        <div class="bg-white rounded-lg p-4 border border-neutral-100">
            <div class="text-sm text-neutral-500">5 étoiles</div>
            <div class="text-2xl font-semibold mt-1">
                <%= reviews.filter(r => r.rating === 5).length %>
            </div>
        </div>
        <div class="bg-white rounded-lg p-4 border border-neutral-100">
            <div class="text-sm text-neutral-500">Nouveaux (7j)</div>
            <div class="text-2xl font-semibold mt-1">
                <%= reviews.filter(r => new Date(r.createdAt) > new Date(Date.now() - 7*24*60*60*1000)).length %>
            </div>
        </div>
    </div>

    <% if (reviews.length > 0) { %>
        <!-- Reviews Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% reviews.forEach(review => { %>
                <div class="bg-white rounded-lg border border-neutral-100 hover:border-neutral-200 transition-colors">
                    <!-- Review Header -->
                    <div class="p-4 border-b border-neutral-100">
                        <div class="flex items-start justify-between">
                            <div>
                                <h2 class="font-semibold text-neutral-800">
                                    <%= review.serviceId.serviceName %>
                                </h2>
                                <p class="text-sm text-neutral-500 mt-1">
                                    Par <%= review.userId ? review.userId.name : 'Utilisateur anonyme' %>
                                </p>
                            </div>
                            <span class="px-3 py-1 bg-neutral-100 text-neutral-600 rounded-full text-sm">
                                <%= new Date(review.createdAt).toLocaleDateString('fr-FR', {
                                    day: 'numeric',
                                    month: 'short',
                                    year: 'numeric'
                                }) %>
                            </span>
                        </div>
                    </div>

                    <!-- Review Content -->
                    <div class="p-4">
                        <!-- Rating -->
                        <div class="flex items-center mb-3">
                            <div class="flex text-yellow-400">
                                <% for(let i = 0; i < 5; i++) { %>
                                    <i class="fas fa-star <%= i < review.rating ? 'text-yellow-400' : 'text-neutral-200' %>"></i>
                                <% } %>
                            </div>
                            <span class="ml-2 text-sm text-neutral-500">
                                <%= review.rating %>/5
                            </span>
                        </div>

                        <!-- Comment -->
                        <div class="text-neutral-600 text-sm font-bold">
                            <%= review.comment || 'Pas de commentaire.' %>
                        </div>
                    
                    </div>
                </div>
            <% }); %>
        </div>
    <% } else { %>
        <div class="text-center py-12">
            <div class="text-neutral-400 mb-3">
                <i class="fas fa-star text-6xl"></i>
            </div>
            <h3 class="text-lg font-medium text-neutral-700">Aucun avis pour le moment</h3>
            <p class="text-neutral-500 mt-2">Les avis de vos clients apparaîtront ici une fois qu'ils auront évalué vos services.</p>
        </div>
    <% } %>
</div>

<!-- Alpine.js functionality -->
<script>
document.addEventListener('alpine:init', () => {
    Alpine.data('reviewsData', () => ({
        currentFilter: 'all',
        ratingFilter: 'all',

        filterReviews() {
            // Implementation would go here
            // You would typically make an API call with the new filters
            console.log('Filtering by:', this.currentFilter, this.ratingFilter);
        },

        replyToReview(reviewId) {
            Swal.fire({
                title: 'Répondre à l\'avis',
                input: 'textarea',
                inputPlaceholder: 'Votre réponse...',
                showCancelButton: true,
                confirmButtonText: 'Répondre',
                cancelButtonText: 'Annuler',
                showLoaderOnConfirm: true,
                preConfirm: (response) => {
                    // Here you would typically make an API call to save the response
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            resolve();
                        }, 1000);
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire('Réponse envoyée', '', 'success');
                }
            });
        },

        reportReview(reviewId) {
            Swal.fire({
                title: 'Signaler cet avis ?',
                text: 'Vous allez signaler cet avis pour examen.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Oui, signaler',
                cancelButtonText: 'Annuler'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Implementation would go here
                    Swal.fire('Signalé', 'L\'avis a été signalé pour examen.', 'success');
                }
            });
        },

        archiveReview(reviewId) {
            Swal.fire({
                title: 'Archiver cet avis ?',
                text: 'L\'avis sera archivé mais restera accessible dans les archives.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Oui, archiver',
                cancelButtonText: 'Annuler'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Implementation would go here
                    Swal.fire('Archivé', 'L\'avis a été archivé avec succès.', 'success');
                }
            });
        }
    }));
});
</script>