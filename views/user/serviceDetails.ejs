<%- include('./include/head.ejs')  %>
<%- include('./include/navbar.ejs')  %>
<!-- Request Modal -->
<div id="requestModal" class="fixed inset-0 z-50 hidden">
    <!-- Backdrop -->
    <div class="absolute inset-0 bg-black/50 backdrop-blur-sm" onclick="closeRequestModal()"></div>
    
    <!-- Modal Content -->
    <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-md">
        <div class="bg-white rounded-2xl shadow-xl">
            <!-- Header -->
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h3 class="text-lg font-semibold text-gray-900">Envoyer une demande</h3>
                    <button onclick="closeRequestModal()" class="text-gray-400 hover:text-gray-500">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
    
            <!-- Form -->
            <form id="requestForm" class="p-6 space-y-4">
                <input type="hidden" name="serviceId" value="<%= service._id %>">
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Nom complet</label>
                    <input 
                        type="text" 
                        name="name" 
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        required
                    >
                </div>
    
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Numéro WhatsApp</label>
                    <input 
                        type="tel" 
                        name="whatsapp" 
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        required
                        pattern="\+?[1-9]\d{9,14}"
                    >
                    <p class="mt-1 text-sm text-gray-500">Format: +212612345678</p>
                </div>
    
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Message</label>
                    <textarea 
                        name="message" 
                        rows="4" 
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        required
                        maxlength="500"
                    ></textarea>
                </div>
    
                <button 
                    type="submit"
                    class="w-full px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 
                           transition-colors duration-200 flex items-center justify-center gap-2"
                >
                    <span>Envoyer la demande</span>
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>
    </div>
<!-- service-details.ejs -->
<div class="relative min-h-screen">
    <!-- Premium Service Details -->
    <div class="min-h-screen bg-white">
<!-- Status Bar -->
<div class="bg-gray-800 text-white py-1.5 sm:py-2">
    <div class="max-w-7xl mx-auto px-4">
        <!-- Desktop View -->
        <div class="hidden sm:flex items-center justify-between text-sm">
            <div class="flex items-center gap-4">
                <!-- Premium Badge -->
                <div class="flex items-center gap-1.5">
                    <span class="relative flex h-1.5 w-1.5">
                        <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-amber-400 opacity-75"></span>
                        <span class="relative inline-flex rounded-full h-1.5 w-1.5 bg-amber-400"></span>
                    </span>
                    <span class="text-amber-400 text-xs font-medium">Premium</span>
                </div>

                <!-- Essential Stats -->
                <div class="flex items-center gap-4">
                    <span class="flex items-center gap-1.5 text-white/70">
                        <i class="fas fa-eye text-xs"></i>
                        <%= service.views %>
                    </span>
                    <span class="flex items-center gap-1.5 text-white/70">
                        <i class="fas fa-star text-yellow-400 text-xs"></i>
                        <%= moyenne %>/5
                        <span class="text-xs text-white/50">(<%= categorizedReviewsSummary.good + categorizedReviewsSummary.average + categorizedReviewsSummary.bad %> avis)</span>
                    </span>
                </div>
            </div>

            <button onclick="toggleShareModal()" class="p-1 hover:bg-white/10 rounded-full transition-colors">
                <i class="fas fa-share-alt text-white/70 text-sm"></i>
            </button>
        </div>

        <!-- Mobile View -->
        <div class="sm:hidden flex items-center justify-between">
            <!-- Left Side Stats -->
            <div class="flex items-center gap-3">
                <span class="flex items-center gap-1 text-white/70 text-xs">
                    <i class="fas fa-star text-yellow-400"></i>
                    <%= moyenne %>
                </span>
                <span class="flex items-center gap-1 text-white/70 text-xs">
                    <i class="fas fa-eye"></i>
                    <%= service.views %>
                </span>
            </div>

            <!-- Right Side Actions -->
            <div class="flex items-center gap-2">
                <button onclick="toggleReviewStats()" 
                        class="text-xs text-white/70 px-2 py-0.5 rounded-full border border-white/20 
                               hover:bg-white/10 transition-colors">
                    <%= categorizedReviewsSummary.good + categorizedReviewsSummary.average + categorizedReviewsSummary.bad %> avis
                </button>
                <button onclick="toggleShareModal()" class="p-1 hover:bg-white/10 rounded-full transition-colors">
                    <i class="fas fa-share-alt text-white/70"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Mobile Review Stats Sheet (Hidden by default) -->
<div id="reviewStatsPopup" 
     class="fixed inset-x-0 bottom-0 z-50 bg-gray-800/95 backdrop-blur-sm transform translate-y-full transition-transform duration-300">
    <div class="p-4 max-w-lg mx-auto">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-sm font-medium text-white">Résumé des avis</h3>
            <button onclick="toggleReviewStats()" class="p-1 hover:bg-white/10 rounded-full transition-colors">
                <i class="fas fa-times text-white/60"></i>
            </button>
        </div>
        <div class="space-y-2 text-sm">
            <div class="flex justify-between items-center text-white/70">
                <span class="flex items-center gap-2">
                    <i class="fas fa-thumbs-up text-green-400"></i>
                    Bons avis
                </span>
                <span class="text-green-400"><%= categorizedReviewsSummary.good %></span>
            </div>
            <div class="flex justify-between items-center text-white/70">
                <span class="flex items-center gap-2">
                    <i class="fas fa-thumbs-up text-yellow-400 rotate-0"></i>
                    Avis moyens
                </span>
                <span class="text-yellow-400"><%= categorizedReviewsSummary.average %></span>
            </div>
            <div class="flex justify-between items-center text-white/70">
                <span class="flex items-center gap-2">
                    <i class="fas fa-thumbs-down text-red-400"></i>
                    Mauvais avis
                </span>
                <span class="text-red-400"><%= categorizedReviewsSummary.bad %></span>
            </div>
        </div>
    </div>
</div>


<script>
function toggleReviewStats() {
    const popup = document.getElementById('reviewStatsPopup');
    const isHidden = popup.classList.contains('hidden');
    
    if (isHidden) {
        popup.classList.remove('hidden');
        // Wait a frame to ensure 'hidden' removal is processed
        requestAnimationFrame(() => {
            popup.classList.remove('translate-y-full');
        });
    } else {
        popup.classList.add('translate-y-full');
        // Wait for animation to complete before hiding
        setTimeout(() => {
            popup.classList.add('hidden');
        }, 300);
    }
}
</script>


        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <!-- Service Header -->
            <div class="flex flex-col lg:flex-row gap-12">
                <!-- Left Column -->
                <div class="flex-1 space-y-8">
                    <!-- Service Type & Title -->
                    <div>
                        <div class="inline-flex items-center gap-2 px-3 py-1.5 bg-black/5 rounded-lg mb-4">
                            <i class="<%= {
                                'dressage': 'fas fa-dog',
                                'toilettage': 'fas fa-cut',
                                'pension': 'fas fa-home'
                            }[service.serviceOptions] %> text-black/60"></i>
                            <span class="text-sm font-medium text-black/60">
                                <%= service.serviceOptions %>
                            </span>
                        </div>
                        <h1 class="text-3xl sm:text-4xl font-semibold text-black tracking-tight">
                            <%= service.serviceName %>
                        </h1>
                    </div>

                    <!-- Key Info -->
                    <div class="grid grid-cols-2 gap-6">
                        <div class="p-6 bg-black/5 rounded-2xl">
                            <div class="text-sm text-black/60 mb-1">Prix</div>
                            <div class="text-2xl font-semibold"><%= service.priceRange %> DH</div>
                        </div>
                        <div class="p-6 bg-black/5 rounded-2xl">
                            <div class="text-sm text-black/60 mb-1">Localisation</div>
                            <div class="text-2xl font-semibold"><%= service.location %></div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div>
                        <h2 class="text-lg font-semibold mb-4">À propos du service</h2>
                        <div id="description" class="relative overflow-hidden max-h-[200px] transition-all duration-300">
                            <div class="prose prose-gray max-w-none">
                                <%= service.description %>
                            </div>
                            <div id="fadeOverlay" 
                                class="absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-t from-white to-transparent pointer-events-none"></div>
                        </div>
                        <button id="toggleDescription" 
                            class="mt-4 text-sm text-black/60 hover:text-black flex items-center gap-2 transition-colors">
                            <span id="toggleText">Lire la suite</span>
                            <i id="toggleIcon" class="fas fa-chevron-down transition-transform duration-300"></i>
                        </button>
                    </div>
                </div>

                <!-- Right Column: Provider Card -->
                <div class="lg:w-[400px]">
                    <div class="sticky top-8">
                        <div class="p-8 border border-black/10 rounded-2xl">
                            <!-- Provider Info -->
                            <div class="flex items-center gap-4 pb-6 mb-6 border-b border-black/10" style="cursor: pointer;" onclick='window.location.href = "/@<%= service.createdBy.slug %>"'>
                                <img src="<%= service.createdBy.profileImage || '/default-avatar.png' %>" 
                                    alt="<%= service.createdBy.displayName %>"
                                    class="w-16 h-16 rounded-xl object-cover">
                                <div>
                                    <div class="flex items-center gap-2">
                                        <h3 class="text-lg font-semibold">
                                            <%= service.createdBy.displayName %> 
                                        </h3>
                                        <% if(service.createdBy.isVerified) { %>
                                            <i class="fas fa-badge-check text-blue-500"></i>
                                        <% } %>
                                    </div>
                                    <p class="text-sm text-black/60">Prestataire professionnel</p>
                                </div>
                            </div>

                            <!-- Contact Actions -->
                            <div class="space-y-3">
                                <!-- Mobile: Full Width Button -->
                                <div class="lg:hidden">
                                    <button id="mobileContactBtn" 
                                        class="w-full p-4 bg-black text-white rounded-xl flex items-center justify-center gap-3 
                                        hover:bg-black/90 transition-colors">
                                        <i class="fas fa-phone-alt transform scale-x-[-1]"></i>
                                        <span class="font-medium">Contacter</span>
                                    </button>
                                </div>

                                <!-- Desktop: Detailed Contact Options -->
                                <div class="hidden lg:block space-y-3">
                                    <button onclick="showContactNumber()" 
                                        class="flex items-center justify-between w-full p-4 bg-black text-white 
                                        rounded-xl hover:bg-black/90 transition-colors group">
                                        <div class="flex items-center gap-3">
                                            <i class="fas fa-phone-alt transform scale-x-[-1]"></i>
                                            <span id="contactNumber">Afficher le numéro</span>
                                        </div>
                                        <i class="fas fa-arrow-right opacity-0 group-hover:opacity-100 
                                            transform translate-x-2 group-hover:translate-x-0 transition-all"></i>
                                    </button>
                                    
                                    <!-- Add this button where you want in your service details page -->




<script>
// Modal functions
function openRequestModal() {
document.getElementById('requestModal').classList.remove('hidden');
document.body.style.overflow = 'hidden';
}

function closeRequestModal() {
document.getElementById('requestModal').classList.add('hidden');
document.body.style.overflow = '';
document.getElementById('requestForm').reset();
}

// Form submission
document.getElementById('requestForm').addEventListener('submit', async function(e) {
e.preventDefault();

const submitBtn = this.querySelector('button[type="submit"]');
const originalText = submitBtn.innerHTML;
submitBtn.disabled = true;
submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Envoi en cours...';

try {
    const formData = new FormData(this);
    const response = await fetch('/request', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(Object.fromEntries(formData))
    });

    const data = await response.json();

    if (data.success) {
        // Show success message
        Swal.fire({
            icon: 'success',
            title: 'Demande envoyée !',
            text: 'Votre demande a été envoyée avec succès.',
            confirmButtonText: 'OK'
        });
        closeRequestModal();
    } else {
        // Show error message
        Swal.fire({
            icon: 'error',
            title: 'Erreur',
            text: Array.isArray(data.messages) ? data.messages.join('\n') : data.message,
            confirmButtonText: 'OK'
        });
    }
} catch (error) {
    Swal.fire({
        icon: 'error',
        title: 'Erreur',
        text: 'Une erreur est survenue. Veuillez réessayer.',
        confirmButtonText: 'OK'
    });
} finally {
    submitBtn.disabled = false;
    submitBtn.innerHTML = originalText;
}
});

// Close modal on escape key
document.addEventListener('keydown', function(e) {
if (e.key === 'Escape' && !document.getElementById('requestModal').classList.contains('hidden')) {
    closeRequestModal();
}
});
</script>

                                    <% if (service.createdBy.email) { %>
                                        <a href="mailto:<%= service.createdBy.email %>" 
                                            class="flex items-center justify-between w-full p-4 bg-black/5 
                                            text-black rounded-xl hover:bg-black/10 transition-colors group">
                                            <div class="flex items-center gap-3">
                                                <i class="fas fa-envelope"></i>
                                                <span class="truncate"><%= service.createdBy.email %></span>
                                            </div>
                                            <i class="fas fa-arrow-right opacity-0 group-hover:opacity-100 
                                                transform translate-x-2 group-hover:translate-x-0 transition-all"></i>
                                        </a>
                                    <% } %>
                                </div>
                            </div>
                            <button 
onclick="openRequestModal()"
class="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-xl 
       hover:bg-blue-700 transition-colors duration-200 mt-2 w-full text-center"
>
<i class="fas fa-paper-plane"></i>
<span>Envoyer une demande</span>
</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Gallery Section -->
        <div class="relative bg-gray-50 -mt-8 pt-20 pb-16">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <!-- Gallery Header -->
                <div class="flex items-center justify-between mb-8">
                    <div class="inline-flex items-center gap-2 bg-gray-900/10 px-4 py-2 rounded-full">
                        <i class="fas fa-images text-gray-900"></i>
                        <span class="text-sm font-medium text-gray-900">
                            Photos du service (<%= service.images.length -1 %>)
                        </span>
                    </div>
                </div>

                <!-- Gallery Grid -->
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="gallery">
                    <% let images = Array.isArray(service.images) ? service.images : JSON.parse(service.images); %>
                    <% images.slice(0, -1).forEach((image, index) => { %>
                        <div class="<%= index === 0 ? 'col-span-2 row-span-2' : '' %> 
                            relative group overflow-hidden rounded-xl cursor-zoom-in"
                            onclick="openGallery(<%= index %>)">
                            <img src="<%= image %>" 
                                alt="<%= service.serviceName %> - Image <%= index + 1 %>"
                                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110">

                            <!-- Hover Overlay -->
                            <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent 
                            group-hover:opacity-100 transition-opacity duration-300
                                flex items-end p-4">
                                <div class="flex items-center gap-2 text-white">
                                    <i class="fas fa-expand-alt"></i>
                                    <span class="text-sm font-medium">Voir en plein écran</span>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>

    <!-- Mobile Contact Sheet -->
    <div id="contactSheet" 
        class="fixed inset-x-0 bottom-0 z-50 bg-white rounded-t-3xl transform translate-y-full transition-transform duration-300">
        <div class="p-6 space-y-4">
            <div class="flex items-center justify-between mb-2">
                <h3 class="text-lg font-semibold">Contacter le prestataire</h3>
                <button onclick="toggleContactSheet(false)" class="p-2 hover:bg-black/5 rounded-full">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <a href="tel:+212<%= service.serviceNumber %>" 
                class="flex items-center justify-between w-full p-4 bg-black text-white 
                rounded-xl hover:bg-black/90 transition-colors">
                <div class="flex items-center gap-3">
                    <i class="fas fa-phone-alt transform scale-x-[-1]"></i>
                    <span>+212 <%= service.serviceNumber %></span>
                </div>
                <i class="fas fa-arrow-right"></i>
            </a>

            <% if (service.createdBy.email) { %>
                <a href="mailto:<%= service.createdBy.email %>" 
                    class="flex items-center justify-between w-full p-4 bg-black/5 
                    text-black rounded-xl hover:bg-black/10 transition-colors">
                    <div class="flex items-center gap-3">
                        <i class="fas fa-envelope"></i>
                        <span class="truncate"><%= service.createdBy.email %></span>
                    </div>
                    <i class="fas fa-arrow-right"></i>
                </a>
            <% } %>
        </div>
    </div>

    <!-- Share Modal -->
    <div id="shareModal" 
        class="fixed inset-0 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-all duration-500">
        <!-- Backdrop -->
        <div class="absolute inset-0 bg-black/30 backdrop-blur-lg" onclick="toggleShareModal(false)"></div>
        
        <!-- Modal Content -->
        <div class="relative w-full max-w-xl mx-4 bg-white rounded-3xl shadow-lg 
            overflow-hidden transform translate-y-4 transition-all duration-500 scale-95">
            
            <!-- Header -->
            <div class="pt-8 px-8 pb-6 border-b border-gray-100">
                <div class="flex items-center gap-4">
                    <div class="w-12 h-12 rounded-2xl bg-gray-800 
                        flex items-center justify-center text-white shadow-lg">
                        <i class="fas fa-share-alt text-xl"></i>
                    </div>
                    <div class="flex-1">
                        <h3 class="text-xl font-semibold text-gray-900">Partager ce service</h3>
                        <p class="text-sm text-gray-500 mt-0.5">Choisissez votre méthode de partage préférée</p>
                    </div>
                    <button onclick="toggleShareModal(false)" 
                        class="w-10 h-10 rounded-full flex items-center justify-center 
                        hover:bg-gray-100 transition-colors">
                        <i class="fas fa-times text-gray-400 hover:text-gray-600"></i>
                    </button>
                </div>
            </div>

            <!-- Share Options -->
            <div class="p-8 space-y-8">
                <!-- Social Share Grid -->
                <div class="grid grid-cols-1 gap-4">
                    <!-- WhatsApp -->
                    <button onclick="shareVia('whatsapp')" 
                        class="group relative flex items-center gap-4 p-5 rounded-2xl 
                        hover:bg-gray-100 bg-gray-50 transition-all duration-300">
                        <div class="w-14 h-14 rounded-2xl bg-[#25D366] shadow-lg 
                            flex items-center justify-center transform transition-all duration-300 
                            group-hover:scale-110 group-hover:rotate-6">
                            <i class="fab fa-whatsapp text-white text-2xl"></i>
                        </div>
                        <div class="text-left">
                            <div class="font-semibold text-gray-900">WhatsApp</div>
                            <div class="text-sm text-gray-500 mt-0.5">Partager via message</div>
                        </div>
                    </button>

                    <!-- Facebook -->
                    <button onclick="shareVia('facebook')" 
                        class="group relative flex items-center gap-4 p-5 rounded-2xl 
                        hover:bg-gray-100 bg-gray-50 transition-all duration-300">
                        <div class="w-14 h-14 rounded-2xl bg-[#1877F2] shadow-lg 
                            flex items-center justify-center transform transition-all duration-300 
                            group-hover:scale-110 group-hover:rotate-6">
                            <i class="fab fa-facebook-f text-white text-2xl"></i>
                        </div>
                        <div class="text-left">
                            <div class="font-semibold text-gray-900">Facebook</div>
                            <div class="text-sm text-gray-500 mt-0.5">Partager sur Facebook</div>
                        </div>
                    </button>
                </div>

                <!-- Copy Link Section -->
                <div class="space-y-3">
                    <div class="text-sm font-medium text-gray-700">Ou copier le lien direct</div>
                    <div class="relative flex items-center">
                        <input type="text" id="shareUrl" 
                            value="<%= `https://ndressilik.com/service/${service._id}` %>"
                            class="w-full pl-5 pr-32 py-4 bg-gray-50 border border-gray-200 
                            rounded-xl text-gray-600 text-sm focus:outline-none focus:border-gray-300 
                            transition-colors" readonly>
                        <div class="absolute right-2">
                            <button onclick="copyShareLink()" 
                                class="px-6 py-2.5 bg-gray-900 text-white text-sm font-medium rounded-lg
                                hover:bg-gray-800 focus:ring-4 focus:ring-gray-900/20 
                                transition-all duration-300 flex items-center gap-2">
                                <i class="fas fa-link"></i>
                                <span>Copier</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Gallery Modal -->
    <div id="galleryModal" class="fixed inset-0 z-50 bg-black invisible opacity-0 transition-all duration-300">
        <button onclick="closeGallery()" 
            class="absolute top-4 right-4 z-50 w-10 h-10 flex items-center justify-center 
            rounded-full bg-white/10 hover:bg-white/20 transition-colors">
            <i class="fas fa-times text-white text-xl"></i>
        </button>

        <div class="absolute top-4 left-4 z-50 px-4 py-2 rounded-full bg-white/10 text-white text-sm">
            <span id="currentImageIndex">1</span> / <%= images.length %>
        </div>

        <div class="relative w-full h-full">
            <div id="gallerySlider" class="w-full h-full flex transition-transform duration-300">
                <% images.forEach((image, index) => { %>
                    <div class="min-w-full h-full flex items-center justify-center p-4">
                        <img src="<%= image %>" 
                            alt="<%= service.serviceName %> - Image <%= index + 1 %>"
                            class="max-w-full max-h-full object-contain">
                    </div>
                <% }); %>
            </div>

            <button onclick="previousImage()" 
                class="absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 
                flex items-center justify-center rounded-full bg-white/10 
                hover:bg-white/20 transition-colors">
                <i class="fas fa-chevron-left text-white text-xl"></i>
            </button>
            
            <button onclick="nextImage()" 
                class="absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 
                flex items-center justify-center rounded-full bg-white/10 
                hover:bg-white/20 transition-colors">
                <i class="fas fa-chevron-right text-white text-xl"></i>
            </button>
        </div>
    </div>
</div>



<!-- Main Reviews Container -->
<!-- Main Container with clean background -->
<div class="min-h-screen bg-white py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto space-y-12">
        <!-- Write Review Section -->
        <section class="bg-white border border-black/5 shadow-sm">
            <div class="relative p-6 sm:p-8">
                <div class="relative">
                    <h3 class="text-xl sm:text-2xl text-black mb-8 flex items-center">
                        <span class="font-light tracking-tight">Votre expérience</span>
                        <div class="h-px w-12 bg-black ml-4"></div>
                    </h3>
                    <div id="reviewLimitMessage" class="hidden mb-6 p-4 text-red-600">
                        Vous avez atteint la limite d'avis autorisée.
                    </div>
                    <form id="reviewForm" class="space-y-8">
                        <div class="bg-gray-50/50 p-6 border border-black/5">
                            <label class="block mb-4 text-sm uppercase tracking-wide text-black/70">Note</label>
                            <div class="flex flex-row-reverse justify-end gap-4">
                                <% [5,4,3,2,1].forEach(num => { %>
                                    <input type="radio" id="star<%= num %>" name="rating" value="<%= num %>" class="hidden peer">
                                    <label for="star<%= num %>" 
                                        class="text-3xl sm:text-4xl cursor-pointer text-gray-200 hover:text-black peer-checked:text-black transition-colors duration-300">
                                        ★
                                    </label>
                                <% }) %>
                            </div>
                        </div>
                        
                        <div>
                            <label for="comment" class="block mb-3 text-sm uppercase tracking-wide text-black/70">Commentaire</label>
                            <textarea 
                                id="comment" 
                                name="comment" 
                                required 
                                class="w-full px-6 py-4 border-b border-black/10 focus:border-black focus:ring-0 transition-colors duration-300 resize-none bg-gray-50/30"
                                rows="4"
                                placeholder="Partagez votre expérience..."
                            ></textarea>
                        </div>

                        <button 
                            type="submit" 
                            id="submitReview"
                            class="w-full bg-black text-white px-8 py-4 hover:bg-black/90 focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center transition duration-300 text-sm uppercase tracking-wide"
                        >
                            <span class="button-text">Soumettre</span>
                            <svg class="hidden animate-spin ml-3 h-4 w-4 text-white" id="spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </button>
                    </form>
                </div>
            </div>
        </section>

        <!-- Reviews List Section -->
        <section class="relative">
            <div class="flex justify-between items-end mb-8">
                <h3 class="text-xl sm:text-2xl text-black">
                    <span class="font-light tracking-tight">Avis clients</span>
                    <div class="h-px w-12 bg-black mt-4"></div>
                </h3>
                <p class="text-sm text-black/50 uppercase tracking-wide"><%= reviews?.length || 0 %> avis</p>
            </div>
            
            <% if (reviews && reviews.length > 0) { %>
                <div class="grid gap-8">
                    <% reviews.forEach(review => { %>
                        <div class="group relative bg-white border border-black/5 hover:border-black/10 p-6 sm:p-8 transition-all duration-300">
                            <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-6 mb-6">
                                <div class="flex items-start sm:items-center gap-4">
                                    <div class="w-12 h-12 bg-black flex items-center justify-center flex-shrink-0">
                                        <span class="text-white text-lg font-light">
                                            N
                                        </span>
                                    </div>
                                    <div>
                                        <h4 class="font-medium text-black">Ndressilik Fan</h4>
                                        <p class="text-xs text-black/50 uppercase tracking-wide mt-1">
                                            <%= new Date(review.createdAt).toLocaleDateString('fr-FR', { 
                                                day: 'numeric', 
                                                month: 'long', 
                                                year: 'numeric' 
                                            }) %>
                                        </p>
                                    </div>
                                </div>
                                <div class="flex gap-1.5">
                                    <% for(let i = 1; i <= 5; i++) { %>
                                        <span class="text-2xl <%= i <= review.rating ? 'text-black' : 'text-gray-200' %>">
                                            ★
                                        </span>
                                    <% } %>
                                </div>
                            </div>
                            <div class="sm:ml-16">
                                <p class="text-black/70 leading-relaxed">"<%= review.comment %>"</p>
                            </div>
                        </div>
                    <% }) %>
                </div>
            <% } else { %>
                <div class="text-center py-16 border border-black/5">
                    <svg class="w-12 h-12 mx-auto text-black/20 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 12h.01M12 12h.01M16 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <p class="text-sm text-black/50 uppercase tracking-wide">Aucun avis pour le moment</p>
                </div>
            <% } %>
        </section>
    </div>
</div>

<script>
    // Initialize IndexedDB
    const initDB = () => {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open('ReviewsDB', 1);
            
            request.onerror = () => reject('IndexedDB initialization failed');
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains('reviews')) {
                    db.createObjectStore('reviews', { keyPath: 'serviceId' });
                }
            };
            
            request.onsuccess = () => resolve(request.result);
        });
    };
    
    // Review tracking system
    class ReviewTracker {
        constructor() {
            this.maxReviews = 2;
            this.storageKey = 'serviceReviews';
            this.db = null;
            this.initialized = false;
        }
    
        async init() {
            if (this.initialized) return;
            
            try {
                this.db = await initDB();
                this.initialized = true;
            } catch (error) {
                console.error('Failed to initialize IndexedDB:', error);
            }
        }
    
        // Get review count from both storage methods
        async getReviewCount(serviceId) {
            const counts = await Promise.all([
                this.getLocalStorageCount(serviceId),
                this.getIndexedDBCount(serviceId)
            ]);
            
            // Use the highest count from either storage method
            return Math.max(...counts);
        }
    
        // Local Storage methods
        getLocalStorageCount(serviceId) {
            try {
                const reviews = JSON.parse(localStorage.getItem(this.storageKey) || '{}');
                return reviews[serviceId] || 0;
            } catch {
                return 0;
            }
        }
    
        incrementLocalStorage(serviceId) {
            try {
                const reviews = JSON.parse(localStorage.getItem(this.storageKey) || '{}');
                reviews[serviceId] = (reviews[serviceId] || 0) + 1;
                localStorage.setItem(this.storageKey, JSON.stringify(reviews));
            } catch (error) {
                console.error('LocalStorage increment failed:', error);
            }
        }
    
        // IndexedDB methods
        async getIndexedDBCount(serviceId) {
            if (!this.db) return 0;
            
            return new Promise((resolve) => {
                const transaction = this.db.transaction(['reviews'], 'readonly');
                const store = transaction.objectStore('reviews');
                const request = store.get(serviceId);
                
                request.onsuccess = () => {
                    resolve(request.result?.count || 0);
                };
                
                request.onerror = () => {
                    console.error('IndexedDB read failed');
                    resolve(0);
                };
            });
        }
    
        async incrementIndexedDB(serviceId) {
            if (!this.db) return;
            
            const currentCount = await this.getIndexedDBCount(serviceId);
            const transaction = this.db.transaction(['reviews'], 'readwrite');
            const store = transaction.objectStore('reviews');
            
            store.put({
                serviceId,
                count: currentCount + 1,
                lastUpdated: new Date().toISOString()
            });
        }
    
        // Main methods
        async canSubmitReview(serviceId) {
            await this.init();
            const count = await this.getReviewCount(serviceId);
            return count < this.maxReviews;
        }
    
        async trackReview(serviceId) {
            await this.init();
            this.incrementLocalStorage(serviceId);
            await this.incrementIndexedDB(serviceId);
        }
    }
    
    // Initialize the review tracker
    const reviewTracker = new ReviewTracker();
    
    // Form submission handler
    document.getElementById('reviewForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const serviceId = '<%= service._id %>';
        const canSubmit = await reviewTracker.canSubmitReview(serviceId);
        
        if (!canSubmit) {
            document.getElementById('reviewLimitMessage').classList.remove('hidden');
            return;
        }
        
        const button = document.getElementById('submitReview');
        const buttonText = button.querySelector('.button-text');
        const spinner = document.getElementById('spinner');
        
        const rating = document.querySelector('input[name="rating"]:checked')?.value;
        const comment = document.getElementById('comment').value;
        
        if (!rating) {
            const toast = document.createElement('div');
            toast.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-500 translate-y-20 opacity-0';
            toast.textContent = 'Veuillez sélectionner une note';
            document.body.appendChild(toast);
            setTimeout(() => toast.classList.remove('translate-y-20', 'opacity-0'), 100);
            setTimeout(() => {
                toast.classList.add('translate-y-20', 'opacity-0');
                setTimeout(() => toast.remove(), 500);
            }, 3000);
            return;
        }
    
        button.disabled = true;
        buttonText.textContent = 'Envoi en cours...';
        spinner.classList.remove('hidden');
    
        try {
            const response = await fetch(`/services/${serviceId}/review`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ rating, comment })
            });
    
            const data = await response.json();
    
            if (data.success) {
                await reviewTracker.trackReview(serviceId);
                
                const toast = document.createElement('div');
                toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-500 translate-y-20 opacity-0';
                toast.textContent = 'Avis ajouté avec succès!';
                document.body.appendChild(toast);
                
                setTimeout(() => toast.classList.remove('translate-y-20', 'opacity-0'), 100);
                setTimeout(() => {
                    toast.classList.add('translate-y-20', 'opacity-0');
                    setTimeout(() => toast.remove(), 500);
                }, 3000);
                
                e.target.reset();
                setTimeout(() => window.location.reload(), 1000);
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            const toast = document.createElement('div');
            toast.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-500 translate-y-20 opacity-0';
            toast.textContent = 'Erreur lors de l\'ajout de l\'avis';
            document.body.appendChild(toast);
            setTimeout(() => toast.classList.remove('translate-y-20', 'opacity-0'), 100);
            setTimeout(() => {
                toast.classList.add('translate-y-20', 'opacity-0');
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        } finally {
            button.disabled = false;
            buttonText.textContent = 'Envoyer l\'avis';
            spinner.classList.remove('hidden');
        }
    });
    
    // Check initial review count on page load
    (async () => {
        const serviceId = '<%= service._id %>';
        const canSubmit = await reviewTracker.canSubmitReview(serviceId);
        if (!canSubmit) {
            document.getElementById('reviewLimitMessage').classList.remove('hidden');
            document.getElementById('reviewForm').classList.add('opacity-50', 'pointer-events-none');
        }
    })();
    </script>

<!-- Script -->
<script>
    // Core state management
    const state = {
        description: {
            expanded: false,
            originalHeight: 0
        },
        contactSheet: {
            isOpen: false
        },
        shareModal: {
            isOpen: false
        }
    };

    // Description toggle functionality
    document.addEventListener('DOMContentLoaded', () => {
        const description = document.getElementById('description');
        const fadeOverlay = document.getElementById('fadeOverlay');
        const toggleBtn = document.getElementById('toggleDescription');
        const toggleText = document.getElementById('toggleText');
        const toggleIcon = document.getElementById('toggleIcon');

        // Wait for content to load
        setTimeout(() => {
            // Get original height after content is fully loaded
            state.description.originalHeight = description.scrollHeight;
            updateDescriptionState();
        }, 0);

        function updateDescriptionState() {
            // If content is short, hide toggle
            if (state.description.originalHeight <= 200) {
                toggleBtn.style.display = 'none';
                fadeOverlay.style.display = 'none';
                description.style.maxHeight = 'none';
                return;
            }

            // Update UI based on state
            description.style.maxHeight = state.description.expanded ? 
                `${state.description.originalHeight}px` : '200px';
            fadeOverlay.style.opacity = state.description.expanded ? '0' : '1';
            toggleText.textContent = state.description.expanded ? 'Voir moins' : 'Lire la suite';
            toggleIcon.style.transform = state.description.expanded ? 'rotate(180deg)' : '';
        }

        toggleBtn.addEventListener('click', () => {
            state.description.expanded = !state.description.expanded;
            updateDescriptionState();
        });
    });

    // Mobile Contact Sheet
    function toggleContactSheet(show = null) {
        const sheet = document.getElementById('contactSheet');
        state.contactSheet.isOpen = show ?? !state.contactSheet.isOpen;

        if (state.contactSheet.isOpen) {
            sheet.classList.remove('translate-y-full');
            document.body.style.overflow = 'hidden';
        } else {
            sheet.classList.add('translate-y-full');
            document.body.style.overflow = '';
        }
    }

    // Initialize mobile contact button
    document.getElementById('mobileContactBtn')?.addEventListener('click', () => {
        toggleContactSheet(true);
    });

    // Show contact number
    function showContactNumber() {
        const contactNumber = document.getElementById('contactNumber');
        contactNumber.textContent = '+212 <%= service.serviceNumber %>';
    }

    // Share Modal Functionality
    function toggleShareModal(show = null) {
        const modal = document.getElementById('shareModal');
        state.shareModal.isOpen = show ?? !state.shareModal.isOpen;

        if (state.shareModal.isOpen) {
            modal.classList.remove('opacity-0', 'pointer-events-none');
            modal.querySelector('.transform').classList.remove('translate-y-4', 'scale-95');
            document.body.style.overflow = 'hidden';
        } else {
            modal.classList.add('opacity-0', 'pointer-events-none');
            modal.querySelector('.transform').classList.add('translate-y-4', 'scale-95');
            document.body.style.overflow = '';
        }
    }

    // Share functionality
    function shareVia(platform) {
        const url = window.location.href;
        const title = <%- JSON.stringify(service.serviceName) %>;
        const text = <%- JSON.stringify(service.description.replace(/(<([^>]+)>)/gi, "").substring(0, 100) + '...') %>;

        switch (platform) {
            case 'whatsapp':
                window.open(`https://wa.me/?text=${encodeURIComponent(`${title}\n\n${text}\n\n${url}`)}`);
                break;
            case 'facebook':
                window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`);
                break;
        }

        toggleShareModal(false);
    }

    // Copy link functionality
    async function copyShareLink() {
        const url = document.getElementById('shareUrl');
        
        try {
            await navigator.clipboard.writeText(url.value);
            showToast('Lien copié !', 'success');
        } catch (err) {
            showToast('Erreur lors de la copie', 'error');
        }
    }

    // Toast notification system
    function showToast(message, type = 'success') {
        // Remove existing toasts
        document.querySelectorAll('.toast').forEach(toast => toast.remove());

        const toast = document.createElement('div');
        toast.className = `toast fixed bottom-4 right-4 z-[60] px-6 py-3 rounded-xl shadow-lg 
            flex items-center gap-3 transform translate-y-full opacity-0 transition-all duration-300
            ${type === 'success' ? 'bg-black text-white' : 'bg-red-500 text-white'}`;

        toast.innerHTML = `
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
            <span class="font-medium">${message}</span>
        `;

        document.body.appendChild(toast);

        // Trigger animation
        requestAnimationFrame(() => {
            toast.classList.remove('translate-y-full', 'opacity-0');
        });

        // Remove toast after delay
        setTimeout(() => {
            toast.classList.add('translate-y-full', 'opacity-0');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // Handle escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            if (state.shareModal.isOpen) toggleShareModal(false);
            if (state.contactSheet.isOpen) toggleContactSheet(false);
            if (!galleryModal.classList.contains('invisible')) closeGallery();
        }
    });

    // Gallery functionality
    let currentImageIndex = 0;
    const totalImages = <%= images.length %>;
    const galleryModal = document.getElementById('galleryModal');
    const slider = document.getElementById('gallerySlider');
    const counter = document.getElementById('currentImageIndex');

    function openGallery(index) {
        currentImageIndex = index;
        updateGallery();
        galleryModal.classList.remove('invisible', 'opacity-0');
        document.body.style.overflow = 'hidden';
        document.addEventListener('keydown', handleKeyPress);
    }

    function closeGallery() {
        galleryModal.classList.add('invisible', 'opacity-0');
        document.body.style.overflow = '';
        document.removeEventListener('keydown', handleKeyPress);
    }

    function updateGallery() {
        counter.textContent = currentImageIndex + 1;
        slider.style.transform = `translateX(-${currentImageIndex * 100}%)`;
    }

    function previousImage() {
        currentImageIndex = (currentImageIndex - 1 + totalImages) % totalImages;
        updateGallery();
    }

    function nextImage() {
        currentImageIndex = (currentImageIndex + 1) % totalImages;
        updateGallery();
    }

    function handleKeyPress(e) {
        switch(e.key) {
            case 'ArrowLeft':
                previousImage();
                break;
            case 'ArrowRight':
                nextImage();
                break;
            case 'Escape':
                closeGallery();
                break;
        }
    }

    // Touch events for gallery
    let touchStartX = 0;
    let touchEndX = 0;

    slider.addEventListener('touchstart', e => {
        touchStartX = e.changedTouches[0].screenX;
    });

    slider.addEventListener('touchend', e => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
    });

    function handleSwipe() {
        const swipeThreshold = 50;
        const swipeDistance = touchEndX - touchStartX;
        
        if (Math.abs(swipeDistance) > swipeThreshold) {
            if (swipeDistance > 0) {
                previousImage();
            } else {
                nextImage();
            }
        }
    }
</script>

<%- include('./include/footer.ejs')  %>
