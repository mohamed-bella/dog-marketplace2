<!DOCTYPE html>
<html lang="fr">

<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Cr√©er un Nouveau Service</title>

     <!-- Essential Styles -->
     <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
     <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
     <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

     <!-- Additional Styles -->
     <style>
          .loading-spinner {
               display: inline-block;
               width: 1.5rem;
               height: 1.5rem;
               border: 3px solid rgba(255, 255, 255, .3);
               border-radius: 50%;
               border-top-color: #fff;
               animation: spin 1s ease-in-out infinite;
          }

          @keyframes spin {
               to {
                    transform: rotate(360deg);
               }
          }

          /* Custom Styles */
          body {
               background-color: #f9fafb;
          }

          .step-indicator {
               transition: background-color 0.3s, color 0.3s;
          }

          .step-indicator-active {
               background-color: #2563eb;
               color: white;
          }

          .service-option {
               transition: border-color 0.3s, background-color 0.3s;
          }

          .service-option-selected {
               border-color: #2563eb;
               background-color: #eff6ff;
          }

          .input-focus {
               border-color: #2563eb;
          }

          .button-primary {
               background-color: #2563eb;
               color: white;
               transition: background-color 0.3s;
          }

          .button-primary:hover {
               background-color: #1d4ed8;
          }

          .hidden {
               display: none;
          }
     </style>
</head>

<body class="font-sans antialiased">
     <div class="container mx-auto px-4 py-8">
          <!-- Header -->
          <div class="text-center mb-12">
               <h1 class="text-3xl font-semibold text-gray-800">Cr√©er un Nouveau Service</h1>
               <p class="text-gray-500 mt-2">Partagez vos comp√©tences avec la communaut√©</p>
          </div>

          <!-- Progress Indicator -->
          <div class="flex justify-center mb-8">
               <div class="flex space-x-4">
                    <% const steps=['Type de Service', 'D√©tails' , 'Photos' ]; %>
                         <% steps.forEach((step, index)=> { %>
                              <div class="flex items-center">
                                   <div class="w-8 h-8 rounded-full border-2 border-gray-300 flex items-center justify-center step-indicator" data-step="<%= index + 1 %>">
                                        <span class="text-gray-600">
                                             <%= index + 1 %>
                                        </span>
                                   </div>
                                   <% if (index < steps.length - 1) { %>
                                        <div class="w-8 h-0.5 bg-gray-300"></div>
                                        <% } %>
                              </div>
                              <% }); %>
               </div>
          </div>

          <!-- Form -->
          <form id="serviceForm" class="max-w-2xl mx-auto">
               <!-- Step 1: Service Type -->
               <div class="step" data-step="1">
                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-6">
                         <% const services=[ { id: 'dressage' , name: 'Dressage' , icon: 'üêï' }, { id: 'toilettage' , name: 'Toilettage' , icon: '‚úÇÔ∏è' }, { id: 'promenade' , name: 'Promenade' , icon: 'üö∂' }, { id: 'veterinaire' , name: 'V√©t√©rinaire' , icon: 'ü©∫' }, { id: 'pension' , name: 'Pension' , icon: 'üè†' }, { id: 'transport' , name: 'Transport' , icon: 'üöó' } ]; %>
                              <% services.forEach(service=> { %>
                                   <label class="border rounded-lg p-4 flex flex-col items-center text-center cursor-pointer service-option">
                                        <input type="radio" name="serviceType" value="<%= service.id %>" class="hidden" required>
                                        <span class="text-3xl mb-2">
                                             <%= service.icon %>
                                        </span>
                                        <span class="font-medium text-gray-700">
                                             <%= service.name %>
                                        </span>
                                   </label>
                                   <% }); %>
                    </div>
               </div>

               <!-- Step 2: Service Details -->
               <div class="step hidden" data-step="2">
                    <div class="space-y-6">
                         <div>
                              <label class="block text-gray-700 mb-2">Nom du Service</label>
                              <input type="text" name="serviceName" class="w-full border rounded-lg p-2 focus:outline-none focus:border-blue-500" required>
                         </div>
                         <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                              <div>
                                   <label class="block text-gray-700 mb-2">Prix Minimum (DH)</label>
                                   <input type="number" name="minPrice" class="w-full border rounded-lg p-2 focus:outline-none focus:border-blue-500" required>
                              </div>
                              <div>
                                   <label class="block text-gray-700 mb-2">Prix Maximum (DH)</label>
                                   <input type="number" name="maxPrice" class="w-full border rounded-lg p-2 focus:outline-none focus:border-blue-500" required>
                              </div>
                         </div>
                         <div>
                              <label class="block text-gray-700 mb-2">Ville</label>
                              <select name="location" class="w-full border rounded-lg p-2 focus:outline-none focus:border-blue-500" required>
                                   <option value="">S√©lectionnez une ville</option>
                                   <% const cities=['Casablanca', 'Rabat' , 'Marrakech' , 'Agadir' , 'Tanger' , 'F√®s' ]; %>
                                        <% cities.forEach(city=> { %>
                                             <option value="<%= city.toLowerCase() %>">
                                                  <%= city %>
                                             </option>
                                             <% }); %>
                              </select>
                         </div>
                         <div>
                              <label class="block text-gray-700 mb-2">Description</label>
                              <textarea name="description" rows="4" class="w-full border rounded-lg p-2 focus:outline-none focus:border-blue-500" required></textarea>
                         </div>
                    </div>
               </div>

               <!-- Step 3: Photos -->
               <div class="step hidden" data-step="3">
                    <div>
                         <label class="block text-gray-700 mb-2">Photos du Service</label>
                         <input type="file" class="filepond" name="serviceImages" multiple data-max-file-size="5MB" data-max-files="5">
                         <p class="text-sm text-gray-500 mt-2">Maximum 5 photos, 5MB par photo</p>
                    </div>
               </div>


               <!-- Navigation Buttons -->
               <div class="flex justify-between items-center mt-8">
                    <button type="button" id="prevBtn" class="hidden px-4 py-2 rounded-lg text-gray-600 hover:bg-gray-100">
                         Pr√©c√©dent
                    </button>
                    <button type="button" id="nextBtn" class="px-6 py-2 rounded-lg button-primary">
                         Suivant
                    </button>
                    <button type="submit" id="submitBtn" class="hidden px-6 py-2 rounded-lg button-primary">
                         <span class="submit-text">Cr√©er le Service</span>
                         <span class="loading-spinner hidden"></span>
                    </button>
               </div>
          </form>
     </div>

     <!-- Scripts -->
     <!-- Scripts -->
     <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
     <script src="https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js"></script>
     <script src="https://unpkg.com/filepond-plugin-image-validate-size/dist/filepond-plugin-image-validate-size.js"></script>
     <script src="https://unpkg.com/filepond/dist/filepond.js"></script>

     <script>
          document.addEventListener('DOMContentLoaded', function () {
               let currentStep = 1;
               const totalSteps = 3;

               // Elements
               const steps = document.querySelectorAll('.step');
               const stepIndicators = document.querySelectorAll('.step-indicator');
               const prevBtn = document.getElementById('prevBtn');
               const nextBtn = document.getElementById('nextBtn');
               const submitBtn = document.getElementById('submitBtn');
               const serviceOptions = document.querySelectorAll('.service-option');
               const form = document.getElementById('serviceForm');

               // Initialize FilePond
               FilePond.registerPlugin(
                    FilePondPluginImagePreview,
                    FilePondPluginFileValidateType,
                    FilePondPluginImageValidateSize
               );

               const pond = FilePond.create(document.querySelector('.filepond'), {
                    allowMultiple: true,
                    maxFiles: 5,
                    maxFileSize: '5MB',
                    acceptedFileTypes: ['image/*'],
                    labelIdle: 'Glissez et d√©posez vos images ou <span class="filepond--label-action">Parcourir</span>',
                    labelMaxFileSize: 'Taille maximale de fichier: 5MB',
                    labelMaxFileSizeExceeded: 'Fichier trop volumineux',
                    labelFileTypeNotAllowed: 'Type de fichier invalide',
                    labelFileProcessing: 'T√©l√©chargement',
                    labelFileProcessingComplete: 'T√©l√©chargement termin√©',
                    labelFileProcessingAborted: 'T√©l√©chargement annul√©',
                    labelFileProcessingError: 'Erreur lors du t√©l√©chargement',
                    labelTapToCancel: 'Cliquez pour annuler',
                    server: {
                         process: {
                              url: '/services/upload-temp',
                              method: 'POST',
                              onload: (response) => {

                                   const data = JSON.parse(response);
                                   return data.uploadedUrls[0].url;
                              },
                              onerror: (response) => {
                                   console.error('Upload error:', response);
                                   return response.data;
                              }
                         }
                    }
               });


               // Functions
               function showStep(step) {
                    steps.forEach((el, index) => {
                         el.classList.toggle('hidden', index !== step - 1);
                    });
                    updateStepIndicator(step);
                    updateNavigationButtons(step);
               }

               function updateNavigationButtons(step) {
                    prevBtn.classList.toggle('hidden', step === 1);
                    nextBtn.classList.toggle('hidden', step === totalSteps);
                    submitBtn.classList.toggle('hidden', step !== totalSteps);
               }

               function updateStepIndicator(step) {
                    stepIndicators.forEach((el, index) => {
                         el.classList.toggle('step-indicator-active', index === step - 1);
                         el.classList.toggle('border-blue-500', index <= step - 1);
                         el.classList.toggle('border-gray-300', index > step - 1);
                         el.querySelector('span').classList.toggle('text-white', index === step - 1);
                         el.querySelector('span').classList.toggle('text-gray-600', index !== step - 1);
                    });
               }

               function validateStep(step) {
                    const currentFields = steps[step - 1].querySelectorAll('input[required], select[required], textarea[required]');
                    let isValid = true;

                    currentFields.forEach(field => {
                         if (!field.checkValidity()) {
                              field.reportValidity();
                              isValid = false;
                         }
                    });

                    // Special validation for images on step 3
                    if (step === 3) {
                         const files = pond.getFiles();
                         if (files.length === 0) {
                              Swal.fire({
                                   icon: 'error',
                                   title: 'Images requises',
                                   text: 'Veuillez ajouter au moins une image'
                              });
                              isValid = false;
                         }
                    }

                    return isValid;
               }

               function showLoading() {
                    submitBtn.disabled = true;
                    submitBtn.querySelector('.submit-text').classList.add('hidden');
                    submitBtn.querySelector('.loading-spinner').classList.remove('hidden');
               }

               function hideLoading() {
                    submitBtn.disabled = false;
                    submitBtn.querySelector('.submit-text').classList.remove('hidden');
                    submitBtn.querySelector('.loading-spinner').classList.add('hidden');
               }

               // Event Listeners
               nextBtn.addEventListener('click', function () {
                    if (validateStep(currentStep)) {
                         currentStep++;
                         showStep(currentStep);
                    }
               });

               prevBtn.addEventListener('click', function () {
                    currentStep--;
                    showStep(currentStep);
               });

               serviceOptions.forEach(option => {
                    option.addEventListener('click', function () {
                         serviceOptions.forEach(el => el.classList.remove('service-option-selected'));
                         this.classList.add('service-option-selected');
                    });
               });

               // Form Submission
               form.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    if (!validateStep(currentStep)) {
                         return;
                    }

                    showLoading();

                    try {
                         const formData = new FormData(this);

                         // Add uploaded files' URLs to form data
                         const files = pond.getFiles();
                         const fileUrls = files.map(file => file.serverId);
                         if (fileUrls.length > 0) {
                              formData.append('serviceImages', JSON.stringify(fileUrls));
                         }

                         // console.log(fileUrls)

                         const response = await fetch('/services/add', {
                              method: 'POST',
                              body: formData
                         });


                         const result = await response.json();

                         if (response.ok) {
                              await Swal.fire({
                                   icon: 'success',
                                   title: 'Service cr√©√© avec succ√®s!',
                                   text: 'Redirection vers le tableau de bord...',
                                   showConfirmButton: false,
                                   timer: 1500
                              });

                              // window.location.href = '/dashboard';
                         } else {
                              throw new Error(result.message || 'Une erreur est survenue');
                         }
                    } catch (error) {
                         console.error('Error submitting form:', error);
                         Swal.fire({
                              icon: 'error',
                              title: 'Erreur',
                              text: error.message || 'Une erreur est survenue lors de la cr√©ation du service'
                         });
                    } finally {
                         hideLoading();
                    }
               });

               // Handle step progress bar
               function updateProgressBar() {
                    const progress = ((currentStep - 1) / (totalSteps - 1)) * 100;
                    document.getElementById('progressBar').style.width = `${progress}%`;
               }

               // Add progress bar update to step changes
               const originalShowStep = showStep;
               showStep = function (step) {
                    originalShowStep(step);
                    updateProgressBar();
               };

               // Initial Setup
               showStep(currentStep);
               updateProgressBar();
          });
     </script>
</body>

</html>