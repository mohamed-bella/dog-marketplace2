<!DOCTYPE html>
<html lang="fr">

<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Cr√©er un Nouveau Service</title>

     <!-- Essential Styles -->
     <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
     <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
     <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

     <!-- Additional Styles -->
     <style>
          .loading-spinner {
               display: inline-block;
               width: 1.5rem;
               height: 1.5rem;
               border: 3px solid rgba(255, 255, 255, .3);
               border-radius: 50%;
               border-top-color: #fff;
               animation: spin 1s ease-in-out infinite;
          }

          @keyframes spin {
               to {
                    transform: rotate(360deg);
               }
          }

          /* Custom Styles */
          body {
               background-color: #f9fafb;
          }

          .step-indicator {
               transition: background-color 0.3s, color 0.3s;
          }

          .step-indicator-active {
               background-color: #2563eb;
               color: white;
          }

          .service-option {
               transition: border-color 0.3s, background-color 0.3s;
          }

          .service-option-selected {
               border-color: #2563eb;
               background-color: #eff6ff;
          }

          .input-focus {
               border-color: #2563eb;
          }

          .button-primary {
               background-color: #2563eb;
               color: white;
               transition: background-color 0.3s;
          }

          .button-primary:hover {
               background-color: #1d4ed8;
          }

          .hidden {
               display: none;
          }
     </style>
</head>

<body class="font-sans antialiased">
     <!-- Define variables first -->
     <% const steps=['Type de Service', 'D√©tails' , 'Photos' ]; const services=[ { id: 'dressage' , name: 'Dressage' , icon: 'üêï' }, { id: 'toilettage' , name: 'Toilettage' , icon: '‚úÇÔ∏è' }, { id: 'promenade' , name: 'Promenade' , icon: 'üö∂' }, { id: 'veterinaire' , name: 'V√©t√©rinaire' , icon: 'ü©∫' }, { id: 'pension' , name: 'Pension' , icon: 'üè†' }, { id: 'transport' , name: 'Transport' , icon: 'üöó' } ]; const cities=['Casablanca', 'Rabat' , 'Marrakech' , 'Agadir' , 'Tanger' , 'F√®s' ]; %>

          <div class="min-h-screen bg-white sm:bg-gray-50 py-8">
               <div class="container max-w-4xl mx-auto px-4">
                    <!-- Back to Dashboard Button -->
                    <a href="/dashboard" class="inline-flex items-center text-gray-600 hover:text-gray-900 mb-8 group transition-all">
                         <svg class="w-5 h-5 mr-2 transform transition-transform group-hover:-translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                         </svg>
                         Retour au tableau de bord
                    </a>

                    <!-- Main Content Card -->
                    <div class="bg-white rounded-2xl shadow-sm sm:p-8">
                         <!-- Header -->
                         <div class="text-center mb-10">
                              <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">Cr√©er un Nouveau Service</h1>
                              <p class="mt-2 text-gray-600">Partagez vos comp√©tences avec la communaut√©</p>
                         </div>

                         <!-- Progress Steps -->
                         <div class="relative mb-12">
                              <div class="absolute left-0 right-0 top-1/2 h-0.5 bg-gray-200 -translate-y-1/2"></div>
                              <div class="relative flex justify-between max-w-2xl mx-auto px-4">
                                   <% steps.forEach((step, index)=> { %>
                                        <div class="flex flex-col items-center">
                                             <div class="relative z-10 w-10 h-10 rounded-full bg-white border-2 border-gray-300 
                            flex items-center justify-center step-indicator transition-all duration-300" data-step="<%= index + 1 %>">
                                                  <span class="text-gray-600 font-medium">
                                                       <%= index + 1 %>
                                                  </span>
                                             </div>
                                             <span class="mt-2 text-sm font-medium text-gray-600 hidden sm:block">
                                                  <%= step %>
                                             </span>
                                        </div>
                                        <% }); %>
                              </div>
                         </div>

                         <!-- Form -->
                         <form id="serviceForm" class="max-w-2xl mx-auto space-y-8">
                              <!-- Step 1: Service Type -->
                              <div class="step" data-step="1">
                                   <div class="mb-4">
                                        <p class="text-gray-700">Veuillez s√©lectionner le type de service que vous souhaitez offrir¬†:</p>
                                   </div>
                                   <div class="grid grid-cols-2 sm:grid-cols-3 gap-4">
                                        <% services.forEach(service=> { %>
                                             <label class="service-option cursor-pointer group">
                                                  <input type="radio" name="serviceType" value="<%= service.id %>" class="absolute opacity-0 w-0 h-0" required>
                                                  <div class="relative p-4 rounded-xl border-2 border-gray-200 
                                transition-all duration-200 hover:border-blue-200
                                group-[.selected]:border-blue-500 group-[.selected]:bg-blue-50">
                                                       <div class="flex flex-col items-center text-center gap-3">
                                                            <span class="text-3xl transform transition-transform duration-200 
                                        group-hover:scale-110">
                                                                 <%= service.icon %>
                                                            </span>
                                                            <span class="font-medium text-gray-900">
                                                                 <%= service.name %>
                                                            </span>
                                                       </div>
                                                       <!-- Checkmark Indicator -->
                                                       <div class="absolute top-3 right-3 opacity-0 transform scale-0 
                                    transition-all duration-200 group-[.selected]:opacity-100 
                                    group-[.selected]:scale-100">
                                                            <svg class="w-5 h-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                                                 <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" />
                                                            </svg>
                                                       </div>
                                                  </div>
                                             </label>
                                             <% }); %>
                                   </div>
                              </div>

                              <!-- Step 2: Service Details -->
                              <div class="step hidden" data-step="2">
                                   <div class="space-y-6">
                                        <div class="form-group">
                                             <label class="block text-sm font-medium text-gray-700 mb-1">Nom du Service</label>
                                             <input type="text" name="serviceName" placeholder="Entrez un nom accrocheur pour votre service" class="w-full px-4 py-3 rounded-lg border border-gray-300 
                            focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 
                            transition-all duration-200" required>
                                             <p class="mt-1 text-sm text-gray-500">Ce nom sera visible par les utilisateurs.</p>
                                        </div>

                                        <div class="form-group">
                                             <label class="block text-sm font-medium text-gray-700 mb-1">Prix (DH)</label>
                                             <div class="relative">
                                                  <input type="number" name="minPrice" placeholder="Exemple¬†: 200" class="w-full px-4 py-3 rounded-lg border border-gray-300 
                                focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 
                                transition-all duration-200" required>
                                                  <span class="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500">DH</span>
                                             </div>
                                             <p class="mt-1 text-sm text-gray-500">Indiquez le prix minimum pour votre service en dirhams (DH).</p>
                                        </div>

                                        <div class="form-group">
                                             <label class="block text-sm font-medium text-gray-700 mb-1">Ville</label>
                                             <select name="location" class="w-full px-4 py-3 rounded-lg border border-gray-300 
                                focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 
                                transition-all duration-200" required>
                                                  <option value="">S√©lectionnez une ville</option>
                                                  <% cities.forEach(city=> { %>
                                                       <option value="<%= city.toLowerCase() %>">
                                                            <%= city %>
                                                       </option>
                                                       <% }); %>
                                             </select>
                                             <p class="mt-1 text-sm text-gray-500">Choisissez la ville o√π votre service est disponible.</p>
                                        </div>

                                        <div class="form-group">
                                             <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                             <textarea name="description" rows="4" placeholder="D√©crivez votre service en d√©tail" class="w-full px-4 py-3 rounded-lg border border-gray-300 
                            focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 
                            transition-all duration-200 resize-none" required></textarea>
                                             <p class="mt-1 text-sm text-gray-500">Fournissez une description compl√®te pour attirer plus de clients.</p>
                                        </div>
                                   </div>
                              </div>

                              <!-- Step 3: Photos -->
                              <div class="step hidden" data-step="3">
                                   <div>
                                        <label class="block text-gray-700 mb-2">Photos du Service</label>
                                        <input type="file" class="filepond" name="serviceImages" multiple data-max-file-size="5MB" data-max-files="5" accept="image/*">
                                        <p class="text-sm text-gray-500 mt-2">Ajoutez jusqu'√† 5 photos (maximum 5MB par photo).</p>
                                        <p class="text-sm text-gray-500">Formats accept√©s¬†: JPG, PNG, GIF.</p>
                                   </div>
                              </div>

                              <!-- Navigation Buttons -->
                              <div class="flex items-center justify-between pt-6 border-t">
                                   <button type="button" id="prevBtn" class="hidden px-6 py-3 text-gray-700 bg-white border border-gray-300 
                    rounded-lg hover:bg-gray-50 transition-all duration-200">
                                        Pr√©c√©dent
                                   </button>
                                   <button type="button" id="nextBtn" class="ml-auto px-6 py-3 bg-blue-600 text-white rounded-lg 
                    hover:bg-blue-700 transition-all duration-200">
                                        Suivant
                                   </button>
                                   <button type="submit" id="submitBtn" class="hidden ml-auto px-6 py-3 bg-blue-600 text-white rounded-lg 
                    hover:bg-blue-700 transition-all duration-200">
                                        <span class="submit-text">Cr√©er le Service</span>
                                        <span class="loading-spinner hidden"></span>
                                   </button>
                              </div>
                         </form>
                    </div>
               </div>
          </div>


          <style>
               /* Active step styles */
               .step-indicator[data-active="true"] {
                    @apply border-blue-500 bg-blue-500 text-white;
               }

               /* Service option selection styles */
               .service-option input:checked+div {
                    @apply border-blue-500 bg-blue-50;
               }

               /* Animations */
               .step {
                    animation: fadeIn 0.3s ease-out;
               }

               @keyframes fadeIn {
                    from {
                         opacity: 0;
                         transform: translateY(10px);
                    }

                    to {
                         opacity: 1;
                         transform: translateY(0);
                    }
               }

               .loading-spinner {
                    animation: spin 1s linear infinite;
               }

               @keyframes spin {
                    from {
                         transform: rotate(0deg);
                    }

                    to {
                         transform: rotate(360deg);
                    }
               }
          </style>

          <script>
               // Service type selection handler
               document.querySelectorAll('.service-option').forEach(option => {
                    const input = option.querySelector('input');

                    input.addEventListener('change', () => {
                         // Remove selected class from all options
                         document.querySelectorAll('.service-option').forEach(opt => {
                              opt.classList.remove('selected');
                         });

                         // Add selected class to checked option
                         if (input.checked) {
                              option.classList.add('selected');
                         }
                    });
               });
          </script>
          <!-- Scripts -->
          <!-- Scripts -->
          <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
          <script src="https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js"></script>
          <script src="https://unpkg.com/filepond-plugin-image-validate-size/dist/filepond-plugin-image-validate-size.js"></script>
          <script src="https://unpkg.com/filepond/dist/filepond.js"></script>

          <script>
               document.addEventListener('DOMContentLoaded', function () {
                    let currentStep = 1;
                    const totalSteps = 3;

                    // Elements
                    const steps = document.querySelectorAll('.step');
                    const stepIndicators = document.querySelectorAll('.step-indicator');
                    const prevBtn = document.getElementById('prevBtn');
                    const nextBtn = document.getElementById('nextBtn');
                    const submitBtn = document.getElementById('submitBtn');
                    const serviceOptions = document.querySelectorAll('.service-option');
                    const form = document.getElementById('serviceForm');

                    // Initialize FilePond
                    FilePond.registerPlugin(
                         FilePondPluginImagePreview,
                         FilePondPluginFileValidateType,
                         FilePondPluginImageValidateSize
                    );

                    const pond = FilePond.create(document.querySelector('.filepond'), {
                         allowMultiple: true,
                         maxFiles: 5,
                         maxFileSize: '5MB',
                         acceptedFileTypes: ['image/*'],
                         labelIdle: 'Glissez et d√©posez vos images ou <span class="filepond--label-action">Parcourir</span>',
                         labelMaxFileSize: 'Taille maximale de fichier: 5MB',
                         labelMaxFileSizeExceeded: 'Fichier trop volumineux',
                         labelFileTypeNotAllowed: 'Type de fichier invalide',
                         labelFileProcessing: 'T√©l√©chargement',
                         labelFileProcessingComplete: 'T√©l√©chargement termin√©',
                         labelFileProcessingAborted: 'T√©l√©chargement annul√©',
                         labelFileProcessingError: 'Erreur lors du t√©l√©chargement',
                         labelTapToCancel: 'Cliquez pour annuler',
                         server: {
                              process: {
                                   url: '/services/upload-temp',
                                   method: 'POST',
                                   onload: (response) => {

                                        const data = JSON.parse(response);
                                        return data.uploadedUrls[0].url;
                                   },
                                   onerror: (response) => {
                                        console.error('Upload error:', response);
                                        return response.data;
                                   }
                              }
                         }
                    });


                    // Functions
                    function showStep(step) {
                         steps.forEach((el, index) => {
                              el.classList.toggle('hidden', index !== step - 1);
                         });
                         updateStepIndicator(step);
                         updateNavigationButtons(step);
                    }

                    function updateNavigationButtons(step) {
                         prevBtn.classList.toggle('hidden', step === 1);
                         nextBtn.classList.toggle('hidden', step === totalSteps);
                         submitBtn.classList.toggle('hidden', step !== totalSteps);
                    }

                    function updateStepIndicator(step) {
                         stepIndicators.forEach((el, index) => {
                              el.classList.toggle('step-indicator-active', index === step - 1);
                              el.classList.toggle('border-blue-500', index <= step - 1);
                              el.classList.toggle('border-gray-300', index > step - 1);
                              el.querySelector('span').classList.toggle('text-white', index === step - 1);
                              el.querySelector('span').classList.toggle('text-gray-600', index !== step - 1);
                         });
                    }

                    function validateStep(step) {
                         const currentFields = steps[step - 1].querySelectorAll('input[required], select[required], textarea[required]');
                         let isValid = true;

                         currentFields.forEach(field => {
                              if (!field.checkValidity()) {
                                   field.reportValidity();
                                   isValid = false;
                              }
                         });

                         // Special validation for images on step 3
                         if (step === 3) {
                              const files = pond.getFiles();
                              if (files.length === 0) {
                                   Swal.fire({
                                        icon: 'error',
                                        title: 'Images requises',
                                        text: 'Veuillez ajouter au moins une image'
                                   });
                                   isValid = false;
                              }
                         }

                         return isValid;
                    }

                    function showLoading() {
                         submitBtn.disabled = true;
                         submitBtn.querySelector('.submit-text').classList.add('hidden');
                         submitBtn.querySelector('.loading-spinner').classList.remove('hidden');
                    }

                    function hideLoading() {
                         submitBtn.disabled = false;
                         submitBtn.querySelector('.submit-text').classList.remove('hidden');
                         submitBtn.querySelector('.loading-spinner').classList.add('hidden');
                    }

                    // Event Listeners
                    nextBtn.addEventListener('click', function () {
                         if (validateStep(currentStep)) {
                              currentStep++;
                              showStep(currentStep);
                         }
                    });

                    prevBtn.addEventListener('click', function () {
                         currentStep--;
                         showStep(currentStep);
                    });

                    serviceOptions.forEach(option => {
                         option.addEventListener('click', function () {
                              serviceOptions.forEach(el => el.classList.remove('service-option-selected'));
                              this.classList.add('service-option-selected');
                         });
                    });

                    // Form Submission
                    form.addEventListener('submit', async function (e) {
                         e.preventDefault();

                         if (!validateStep(currentStep)) {
                              return;
                         }

                         showLoading();

                         try {
                              const formData = new FormData(this);

                              // Add uploaded files' URLs to form data
                              const files = pond.getFiles();
                              const fileUrls = files.map(file => file.serverId);
                              if (fileUrls.length > 0) {
                                   formData.append('serviceImages', JSON.stringify(fileUrls));
                              }

                              // console.log(fileUrls)

                              const response = await fetch('/services/add', {
                                   method: 'POST',
                                   body: formData
                              });


                              const result = await response.json();

                              if (response.ok) {
                                   await Swal.fire({
                                        icon: 'success',
                                        title: 'Service cr√©√© avec succ√®s!',
                                        text: 'Redirection vers le tableau de bord...',
                                        showConfirmButton: false,
                                        timer: 1500
                                   });

                                   window.location.href = '/dashboard';
                              } else {
                                   throw new Error(result.message || 'Une erreur est survenue');
                              }
                         } catch (error) {
                              console.error('Error submitting form:', error);
                              Swal.fire({
                                   icon: 'error',
                                   title: 'Erreur',
                                   text: error.message || 'Une erreur est survenue lors de la cr√©ation du service'
                              });
                         } finally {
                              hideLoading();
                         }
                    });

                    // Handle step progress bar
                    function updateProgressBar() {
                         const progress = ((currentStep - 1) / (totalSteps - 1)) * 100;
                         document.getElementById('progressBar').style.width = `${progress}%`;
                    }

                    // Add progress bar update to step changes
                    const originalShowStep = showStep;
                    showStep = function (step) {
                         originalShowStep(step);
                         updateProgressBar();
                    };

                    // Initial Setup
                    showStep(currentStep);
                    updateProgressBar();
               });
          </script>
</body>

</html>