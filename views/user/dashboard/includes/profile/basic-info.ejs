<!-- basic-info.ejs -->
<div class="bg-white rounded-xl shadow-sm overflow-hidden" id="basicInfoSection">
     <!-- Header -->
     <div class="p-6 border-b border-gray-100 relative bg-gradient-to-r from-indigo-50 to-indigo-100/50">
         <div class="absolute inset-x-0 bottom-0 h-0.5 bg-gradient-to-r from-indigo-500 to-indigo-600"></div>
         <div class="flex items-center justify-between">
             <div class="flex items-center gap-4">
                 <h3 class="text-xl font-semibold text-gray-800">Informations de base</h3>
                 <div class="relative group">
                     <span class="flex h-8 w-8 items-center justify-center rounded-full bg-indigo-50 text-indigo-600 
                         cursor-help transition duration-200 hover:scale-110">
                         <i class="fas fa-info-circle"></i>
                     </span>
                     <div class="absolute left-0 bottom-full mb-2 hidden group-hover:block w-72 p-4 
                         bg-gray-900 text-white text-sm rounded-xl shadow-xl z-10">
                         <div class="flex items-start gap-3">
                             <i class="fas fa-lightbulb text-yellow-400 mt-1"></i>
                             <p>Ces informations seront visibles sur votre profil public et aideront les clients à mieux vous connaître.</p>
                         </div>
                     </div>
                 </div>
             </div>
         </div>
     </div>
 
     <!-- Form -->
     <form id="basicInfoForm" class="p-6 space-y-8">
         <!-- Personal Info Grid -->
         <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
             <!-- Name Input -->
             <div class="space-y-3">
                 <label for="displayName" class="block text-sm font-medium text-gray-700">
                     Nom complet <span class="text-indigo-500">*</span>
                 </label>
                 <div class="relative group">
                     <input type="text" id="displayName" name="displayName" 
                         value="<%= user.displayName %>" 
                         class="w-full h-12 pl-12 pr-4 bg-gray-50 border border-gray-200 rounded-lg
                         focus:bg-white focus:border-indigo-500 focus:ring-4 focus:ring-indigo-500/10
                         transition-all duration-200" required>
                     <i class="fas fa-user absolute left-4 top-1/2 -translate-y-1/2 text-gray-400
                         group-focus-within:text-indigo-500 transition-colors"></i>
                 </div>
             </div>
 
             <!-- Phone Input -->
             <div class="space-y-3">
                 <label for="phoneNumber" class="block text-sm font-medium text-gray-700">
                     Numéro de téléphone <span class="text-indigo-500">*</span>
                 </label>
                 <div class="relative group">
                     <input type="tel" id="phoneNumber" name="phoneNumber" 
                         value="<%= user.phoneNumber %>" 
                         class="w-full h-12 pl-12 pr-4 bg-gray-50 border border-gray-200 rounded-lg
                         focus:bg-white focus:border-indigo-500 focus:ring-4 focus:ring-indigo-500/10
                         transition-all duration-200" 
                         pattern="^(?:\+212|0)[567]\d{8}$" required>
                     <i class="fas fa-phone absolute left-4 top-1/2 -translate-y-1/2 text-gray-400
                         group-focus-within:text-indigo-500 transition-colors"></i>
                 </div>
                 <p class="text-sm text-gray-500">Format: +212 ou 06/07</p>
             </div>
 
             <!-- City Select -->
             <div class="space-y-3">
                 <label for="city" class="block text-sm font-medium text-gray-700">
                     Ville <span class="text-indigo-500">*</span>
                 </label>
                 <div class="relative group">
                     <select id="city" name="city" 
                         class="w-full h-12 pl-12 pr-4 bg-gray-50 border border-gray-200 rounded-lg
                         appearance-none focus:bg-white focus:border-indigo-500 focus:ring-4 
                         focus:ring-indigo-500/10 transition-all duration-200" required>
                         <option value="">Sélectionnez une ville</option>
                         <% const cities = [
                             {name: 'Casablanca'}, {name: 'Rabat'}, {name: 'Marrakech'},
                             {name: 'Agadir'}, {name: 'Tanger'}, {name: 'Fès'},
                             {name: 'Meknès'}, {name: 'Oujda'}, {name: 'Kénitra'},
                             {name: 'Tétouan'}, {name: 'Safi'}, {name: 'El Jadida'},
                             {name: 'Nador'}, {name: 'Berrechid'}, {name: 'Khemisset'},
                             {name: 'Khouribga'}, {name: 'Settat'}, {name: 'Larache'},
                             {name: 'Beni Mellal'}, {name: 'Guelmim'}, {name: 'Taza'},
                             {name: 'Sidi Kacem'}, {name: 'Tiznit'}, {name: 'Essaouira'},
                             {name: 'Khenifra'}, {name: 'Tan-Tan'}, {name: 'Guercif'},
                             {name: 'Chefchaouen'}, {name: 'Mohammedia'}, {name: 'Taounate'},
                             {name: 'Sidi Slimane'}, {name: 'Tarfaya'}, {name: 'Midelt'},
                             {name: 'Errachidia'}, {name: 'Azrou'}, {name: 'Ben Guerir'},
                             {name: 'Chichaoua'}, {name: 'Ouarzazate'}, {name: 'Zaio'}
                         ]; %>
                         <% cities.forEach(city => { %>
                             <option value="<%= city.name %>" 
                                 <%= user.location?.city === city.name ? 'selected' : '' %>>
                                 <%= city.name %>
                             </option>
                         <% }); %>
                     </select>
                     <i class="fas fa-map-marker-alt absolute left-4 top-1/2 -translate-y-1/2 text-gray-400
                         group-focus-within:text-indigo-500 transition-colors"></i>
                     <i class="fas fa-chevron-down absolute right-4 top-1/2 -translate-y-1/2 text-gray-400"></i>
                 </div>
             </div>
 
             <!-- Languages -->
             <div class="space-y-3">
                 <label class="block text-sm font-medium text-gray-700">Langues parlées</label>
                 <div class="grid grid-cols-2 gap-3">
                     <% const languages = [
                         {id: 'french', name: 'Français'},
                         {id: 'arabic', name: 'Arabe'},
                         {id: 'english', name: 'Anglais'},
                         {id: 'spanish', name: 'Espagnol'}
                     ]; %>
                     <% languages.forEach(lang => { %>
                         <label class="flex items-center gap-3 p-3 bg-gray-50 rounded-lg cursor-pointer
                             hover:bg-indigo-50 transition-all duration-200">
                             <input type="checkbox" name="languages" value="<%= lang.id %>"
                                 <%= user.languages?.includes(lang.id) ? 'checked' : '' %>
                                 class="w-4 h-4 text-indigo-600 border-gray-300 rounded
                                 focus:ring-indigo-500">
                             <span class="text-sm text-gray-700"><%= lang.name %></span>
                         </label>
                     <% }); %>
                 </div>
             </div>
         </div>
 
         <!-- Bio Section -->
         <div class="space-y-3">
             <label for="bio" class="block text-sm font-medium text-gray-700">
                 Biographie professionnelle <span class="text-indigo-500">*</span>
             </label>
             <div class="relative group">
                 <textarea id="bio" name="bio" rows="4" 
                     class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg resize-none
                     focus:bg-white focus:border-indigo-500 focus:ring-4 focus:ring-indigo-500/10
                     transition-all duration-200" maxlength="500" required><%= user.bio %></textarea>
                 <div class="absolute right-3 bottom-3 px-2 py-1 text-sm text-indigo-600 
                     bg-indigo-50 rounded-md border border-indigo-100">
                     <span id="bioLength">0</span>/500
                 </div>
             </div>
         </div>
 
         <!-- Experience Section -->
         <div class="space-y-4">
             <label class="block text-sm font-medium text-gray-700">Expérience</label>
             <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                 <div class="relative group">
                     <label class="block text-sm text-gray-600 mb-2">Années d'expérience</label>
                     <input type="number" name="experienceYears" min="0" 
                         value="<%= user.experience?.years || 0 %>"
                         class="w-full h-12 px-4 bg-gray-50 border border-gray-200 rounded-lg
                         focus:bg-white focus:border-indigo-500 focus:ring-4 focus:ring-indigo-500/10
                         transition-all duration-200">
                 </div>
                 <div class="relative group">
                     <label class="block text-sm text-gray-600 mb-2">Description de l'expérience</label>
                     <textarea name="experienceDescription" rows="3" 
                         class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg resize-none
                         focus:bg-white focus:border-indigo-500 focus:ring-4 focus:ring-indigo-500/10
                         transition-all duration-200"><%= user.experience?.description || '' %></textarea>
                 </div>
             </div>
         </div>
 
         <!-- Action Buttons -->
         <div class="flex gap-4 pt-6 border-t">
           
             <button type="submit" 
                 class="flex-1 h-12 px-6 bg-indigo-600 text-white rounded-lg
                 hover:bg-indigo-700 focus:ring-4 focus:ring-indigo-500/30
                 transition-all duration-200 flex items-center justify-center gap-2">
                 <i class="fas fa-check"></i>
                 <span>Enregistrer</span>
             </button>
         </div>
     </form>
 </div>
 
 <script>
 document.addEventListener('DOMContentLoaded', function() {
     // Bio character counter
     const bioTextarea = document.getElementById('bio');
     const bioLength = document.getElementById('bioLength');
     
     function updateBioLength() {
         const length = bioTextarea.value.length;
         bioLength.textContent = length;
         
         // Visual feedback
         if (length > 450) {
             bioLength.classList.add('text-amber-500');
             bioLength.classList.remove('text-red-500', 'text-indigo-600');
         } else if (length > 480) {
             bioLength.classList.add('text-red-500');
             bioLength.classList.remove('text-amber-500', 'text-indigo-600');
         } else {
             bioLength.classList.add('text-indigo-600');
             bioLength.classList.remove('text-amber-500', 'text-red-500');
         }
     }
     
     bioTextarea?.addEventListener('input', updateBioLength);
     updateBioLength();
     
     // Phone number formatting
     const phoneInput = document.getElementById('phoneNumber');
     phoneInput?.addEventListener('input', function(e) {
         let value = e.target.value.replace(/\D/g, '');
         
         if (value.startsWith('212')) {
             value = '+' + value;
         } else if (value.startsWith('0')) {
             value = value;
         } else if (value.length > 0) {
             value = '0' + value;
         }
         
         e.target.value = value;
     });
     
     // Form submission
     const form = document.getElementById('basicInfoForm');
     form?.addEventListener('submit', async function(e) {
         e.preventDefault();
         
         const submitBtn = this.querySelector('button[type="submit"]');
         const allInputs = this.querySelectorAll('input, select, textarea');
         
         // Disable form during submission
         submitBtn.disabled = true;
         allInputs.forEach(input => input.disabled = true);
         
         // Update button state
         const originalBtnContent = submitBtn.innerHTML;
         submitBtn.innerHTML = `
             <svg class="animate-spin h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                 <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"/>
                 <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
             </svg>
             <span>Enregistrement...</span>
         `;
         
         try {
             const formData = new FormData(this);
             <script>
            // Continuing the form submission handler...
            const data = {
                displayName: formData.get('displayName'),
                bio: formData.get('bio'),
                phoneNumber: formData.get('phoneNumber'),
                location: {
                    city: formData.get('city')
                },
                languages: Array.from(document.querySelectorAll('input[name="languages"]:checked'))
                    .map(el => el.value),
                experience: {
                    years: parseInt(formData.get('experienceYears'), 10) || 0,
                    description: formData.get('experienceDescription') || 'Aucune expérience.'
                }
            };

            const response = await fetch('/dashboard/profile/update-basic-info', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Erreur lors de la mise à jour');
            }

            // Show success message
            await Swal.fire({
                icon: 'success',
                title: 'Succès !',
                text: 'Vos informations ont été mises à jour avec succès',
                showConfirmButton: false,
                timer: 1500
            });

            // Reload page to show updates
            window.location.reload();

        } catch (error) {
            console.error('Update error:', error);
            
            // Show error message
            await Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: error.message || 'Une erreur est survenue lors de la mise à jour',
                confirmButtonText: 'Réessayer',
                confirmButtonColor: '#4f46e5'
            });

        } finally {
            // Reset form state
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnContent;
            allInputs.forEach(input => input.disabled = false);
        }
    });

    // Cancel button handler
    const cancelBtn = document.getElementById('cancelBasicInfoBtn');
    cancelBtn?.addEventListener('click', async function() {
        const result = await Swal.fire({
            title: 'Êtes-vous sûr ?',
            text: 'Les modifications non enregistrées seront perdues',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#4f46e5',
            cancelButtonColor: '#d1d5db',
            confirmButtonText: 'Oui, annuler',
            cancelButtonText: 'Non, continuer'
        });

        if (result.isConfirmed) {
            window.location.reload();
        }
    });

    // Input validation and enhancement
    document.querySelectorAll('input[type="text"], textarea').forEach(input => {
        input.addEventListener('focus', function() {
            this.closest('.group')?.classList.add('is-focused');
        });

        input.addEventListener('blur', function() {
            this.closest('.group')?.classList.remove('is-focused');
        });
    });

    // Enhanced city select
    const citySelect = document.getElementById('city');
    if (citySelect) {
        // Add search functionality to city select
        new Choices(citySelect, {
            searchEnabled: true,
            searchPlaceholderValue: 'Rechercher une ville...',
            placeholder: true,
            placeholderValue: 'Sélectionnez une ville',
            classNames: {
                containerOuter: 'choices w-full h-12 bg-gray-50 border border-gray-200 rounded-lg',
                containerInner: 'choices__inner h-full flex items-center',
                input: 'choices__input pl-12',
                inputCloned: 'choices__input--cloned',
                list: 'choices__list',
                listItems: 'choices__list--multiple',
                listSingle: 'choices__list--single',
                listDropdown: 'choices__list--dropdown',
                item: 'choices__item',
                itemSelectable: 'choices__item--selectable',
                itemDisabled: 'choices__item--disabled',
                itemChoice: 'choices__item--choice',
                placeholder: 'choices__placeholder',
                group: 'choices__group',
                groupHeading: 'choices__heading',
                button: 'choices__button'
            }
        });
    }

    // Add form validation indicators
    const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
    requiredFields.forEach(field => {
        field.addEventListener('input', function() {
            const isValid = this.checkValidity();
            const container = this.closest('.group');
            if (container) {
                container.classList.toggle('is-valid', isValid);
                container.classList.toggle('is-invalid', !isValid);
            }
        });
    });

    // Add custom styles
    const style = document.createElement('style');
    style.textContent = `
        .is-focused {
            position: relative;
        }

        .is-focused::after {
            content: '';
            position: absolute;
            inset: -2px;
            border-radius: 0.5rem;
            background: linear-gradient(to right, #4f46e5, #6366f1);
            opacity: 0.1;
            z-index: -1;
        }

        .is-valid .group-focus-within:text-indigo-500 {
            color: #059669;
        }

        .is-invalid .group-focus-within:text-indigo-500 {
            color: #dc2626;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-2px); }
            75% { transform: translateX(2px); }
        }

        .is-invalid input:invalid,
        .is-invalid select:invalid,
        .is-invalid textarea:invalid {
            animation: shake 0.2s ease-in-out;
            border-color: #dc2626;
        }
    `;
    document.head.appendChild(style);
});
</script>