<!DOCTYPE html>
<html lang="fr">

<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>
          <%= pageTitle %>
     </title>

     <!-- External libraries -->
     <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
     <script src="https://cdn.tailwindcss.com"></script>
     <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
     <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>

<body class="bg-gray-50">
     <div class="max-w-4xl mx-auto px-4 py-8">
          <!-- Header Section -->
          <div class="mb-8 text-center">
               <h1 class="text-3xl font-bold mb-4">Analyse de Race de Chien</h1>
               <p class="text-gray-600">Téléchargez une photo de votre chien pour l'analyser avec l'IA</p>
          </div>

          <!-- Upload Section -->
          <form id="uploadForm" class="mb-8">
               <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 transition-all duration-300" id="dropZone" enctype="multipart/form-data">
                    <input type="file" id="fileInput" class="hidden" accept="image/*">
                    <div class="text-center">
                         <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4"></i>
                         <button type="button" id="browseButton" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors">Choisir une image</button>
                         <p class="mt-2 text-sm text-gray-500">ou déposez une image ici</p>
                         <p class="mt-1 text-xs text-gray-400">Formats acceptés: JPG, PNG (max 5MB)</p>
                    </div>
               </div>
          </form>

          <!-- Preview Section -->
          <div id="previewSection" class="hidden mb-8">
               <div class="relative">
                    <img id="imagePreview" class="max-w-full h-auto rounded-lg shadow-lg" alt="Preview">
                    <button id="removeImage" class="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors"><i class="fas fa-times"></i></button>
               </div>
               <button id="analyzeButton" class="mt-4 w-full bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600 transition-colors">Analyser l'image</button>
          </div>

          <!-- Results Section -->
          <div id="resultsSection" class="hidden">
               <!-- Loading State -->
               <div id="loadingState" class="text-center py-8">
                    <div class="animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent mx-auto"></div>
                    <p class="mt-4 text-gray-600">Analyse en cours...</p>
               </div>

               <!-- Results Content -->
               <div id="resultsContent" class="hidden space-y-6">
                    <!-- Main Result -->
                    <div class="bg-white rounded-lg shadow-lg p-6">
                         <h2 class="text-2xl font-bold mb-4">Résultats de l'Analyse</h2>
                         <div class="grid md:grid-cols-2 gap-4">
                              <div>
                                   <p class="text-lg font-semibold">Race détectée: <span id="breedResult" class="text-blue-600"></span></p>
                                   <p class="text-gray-600">Confiance: <span id="confidenceResult"></span></p>
                              </div>
                         </div>
                    </div>

                    <!-- Other Predictions -->
                    <div class="bg-white rounded-lg shadow-lg p-6">
                         <h3 class="text-xl font-semibold mb-4">Autres Possibilités Détectées</h3>
                         <div id="otherPredictions" class="space-y-2"></div>
                    </div>
               </div>
          </div>
     </div>

     <script>
          let currentImage;

          // Function to send image to Nyckel API and get breed prediction
          async function analyzeImage(imgElement) {
               const modelUrl = '/api/analyze-dog';
               try {
                    document.getElementById('loadingState').classList.remove('hidden');
                    const imageBlob = await fetch(imgElement.src).then(res => res.blob());
                    const formData = new FormData();
                    formData.append('image', imageBlob);

                    const response = await axios.post(modelUrl, formData);
                    const data = response.data.data;

                    updateResults({
                         breed: data.breed,
                         confidence: data.confidence,
                         otherPredictions: data.otherPredictions || []
                    });

               } catch (error) {
                    console.error('Error analyzing image:', error);
               } finally {
                    document.getElementById('loadingState').classList.add('hidden');
                    document.getElementById('resultsContent').classList.remove('hidden');
               }
          }

          // Update the result content
          function updateResults(results) {
               document.getElementById('breedResult').textContent = results.breed;
               document.getElementById('confidenceResult').textContent = `${results.confidence}%`;
               const otherPredictionsContainer = document.getElementById('otherPredictions');
               otherPredictionsContainer.innerHTML = '';
               results.otherPredictions.forEach(prediction => {
                    const div = document.createElement('div');
                    div.textContent = `${prediction.breed}: ${Math.round(prediction.confidence * 100)}%`;
                    otherPredictionsContainer.appendChild(div);
               });
          }

          // Handle file upload and preview
          function handleFile(file) {
               const reader = new FileReader();
               reader.onload = function (e) {
                    const img = new Image();
                    img.src = e.target.result;
                    img.onload = function () {
                         currentImage = img;
                         document.getElementById('imagePreview').src = e.target.result;
                         document.getElementById('previewSection').classList.remove('hidden');
                         document.getElementById('dropZone').classList.add('hidden');
                    };
               };
               reader.readAsDataURL(file);
          }

          // Event listeners
          document.getElementById('browseButton').addEventListener('click', () => {
               document.getElementById('fileInput').click();
          });

          document.getElementById('fileInput').addEventListener('change', (e) => {
               handleFile(e.target.files[0]);
          });

          document.getElementById('analyzeButton').addEventListener('click', () => {
               if (currentImage) analyzeImage(currentImage);
          });

          document.getElementById('removeImage').addEventListener('click', () => {
               currentImage = null;
               document.getElementById('previewSection').classList.add('hidden');
               document.getElementById('dropZone').classList.remove('hidden');
          });
     </script>
</body>

</html>