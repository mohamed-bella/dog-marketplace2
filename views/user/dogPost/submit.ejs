<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Dog - Modern Portal</title>
    
    <!-- Tailwind and FontAwesome -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            200: '#bae6fd',
                            300: '#7dd3fc',
                            400: '#38bdf8',
                            500: '#0ea5e9',
                            600: '#0284c7',
                            700: '#0369a1',
                        },
                    }
                }
            }
        }
    </script>

    <style>
        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 6px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

        /* Animations */
        .form-step {
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .form-progress-bar {
            transition: width 0.3s ease-in-out;
        }
    </style>
</head>

<body class="bg-gray-50 font-sans antialiased">
    <!-- Main Content Container -->
    <div class="min-h-screen p-4">
        <!-- Add Button -->
        <div class="max-w-2xl mx-auto">
            <button 
                onclick="openModal()"
                class="w-full bg-white rounded-xl shadow-sm hover:shadow-md transition-all border border-gray-100 p-6 flex items-center gap-4 group">
                <div class="w-12 h-12 flex items-center justify-center bg-primary-100 text-primary-600 rounded-full group-hover:scale-110 transition-transform">
                    <i class="fas fa-plus text-lg"></i>
                </div>
                <div class="flex-1 text-left">
                    <h2 class="text-lg font-semibold text-gray-800">Ajouter un chien</h2>
                    <p class="text-gray-500">Créer une annonce d'adoption ou signaler un chien perdu</p>
                </div>
            </button>
        </div>

        <!-- Modal -->
        <div id="formModal" class="hidden fixed inset-0 z-50">
            <div class="fixed inset-0 bg-black/30 backdrop-blur-sm"></div>
            
            <!-- Modal Content -->
            <div class="fixed inset-0 flex items-center justify-center p-4">
                <div class="bg-white rounded-2xl shadow-xl w-full max-w-3xl flex flex-col max-h-[90vh]">
                    <!-- Modal Header -->
                    <div class="flex items-center justify-between p-6 border-b border-gray-100">
                        <h3 class="text-xl font-semibold text-gray-800">Ajouter un chien</h3>
                        <button onclick="closeModal()" class="p-2 hover:bg-gray-100 rounded-full transition-colors">
                            <i class="fas fa-times text-gray-400 hover:text-gray-600"></i>
                        </button>
                    </div>

                    <!-- Progress Bar -->
                    <div class="px-6 py-4 border-b border-gray-100">
                        <div class="relative">
                            <div class="h-1 w-full bg-gray-100 rounded-full overflow-hidden">
                                <div class="form-progress-bar h-full bg-primary-500 rounded-full" style="width: 0%"></div>
                            </div>
                            <div class="mt-2 flex justify-between">
                                <span class="step-indicator text-sm font-medium text-primary-600">Type</span>
                                <span class="step-indicator text-sm font-medium text-gray-400">Détails</span>
                                <span class="step-indicator text-sm font-medium text-gray-400">Location</span>
                                <span class="step-indicator text-sm font-medium text-gray-400">Contact</span>
                            </div>
                        </div>
                    </div>

                    <!-- Scrollable Form Content -->
                    <div class="flex-1 overflow-y-auto p-6">
                        <form id="dogForm" action="/submit" method="POST" enctype="multipart/form-data">
                            <!-- Step 1: Type Selection -->
                            <div class="form-step" data-step="1">
                                <!-- Step Illustration -->
                                <div class="mb-8 text-center">
                                    <div class="w-32 h-32 mx-auto bg-primary-100 rounded-full flex items-center justify-center">
                                        <i class="fas fa-paw text-5xl text-primary-500"></i>
                                    </div>
                                    <h3 class="mt-4 text-xl font-medium text-gray-900">Quel type d'annonce ?</h3>
                                    <p class="mt-2 text-gray-500">Choisissez le type d'annonce que vous souhaitez créer</p>
                                </div>

                                <div class="grid grid-cols-2 gap-4 max-w-lg mx-auto">
                                    <label class="cursor-pointer">
                                        <input type="radio" name="type" value="adoption" class="sr-only peer">
                                        <div class="p-6 rounded-xl border-2 border-gray-100 peer-checked:border-primary-500 peer-checked:bg-primary-50 hover:border-primary-200 transition-all text-center">
                                            <i class="fas fa-heart text-3xl text-primary-500 mb-3"></i>
                                            <h4 class="font-medium text-gray-900">Adoption</h4>
                                            <p class="text-sm text-gray-500 mt-1">Placer un chien à l'adoption</p>
                                        </div>
                                    </label>

                                    <label class="cursor-pointer">
                                        <input type="radio" name="type" value="lost" class="sr-only peer">
                                        <div class="p-6 rounded-xl border-2 border-gray-100 peer-checked:border-primary-500 peer-checked:bg-primary-50 hover:border-primary-200 transition-all text-center">
                                            <i class="fas fa-search text-3xl text-primary-500 mb-3"></i>
                                            <h4 class="font-medium text-gray-900">Chien perdu</h4>
                                            <p class="text-sm text-gray-500 mt-1">Signaler un chien perdu</p>
                                        </div>
                                    </label>
                                </div>
                            </div>

                            <!-- Step 2: Basic Details -->
                           <!-- Replace the existing Step 2 with this enhanced version that includes image upload -->
<div class="form-step hidden" data-step="2">
    <div class="mb-8 text-center">
        <div class="w-32 h-32 mx-auto bg-primary-100 rounded-full flex items-center justify-center">
            <i class="fas fa-camera text-5xl text-primary-500"></i>
        </div>
        <h3 class="mt-4 text-xl font-medium text-gray-900">Informations du chien</h3>
        <p class="mt-2 text-gray-500">Ajoutez des photos et les informations de base</p>
    </div>

    <div class="max-w-md mx-auto space-y-6">
        <!-- Image Upload Zone -->
        <div class="form-group">
            <label class="block text-sm font-medium text-gray-700 mb-2">
                Photos du chien
                <span class="text-gray-400 text-xs">(Maximum 5 photos)</span>
            </label>
            
            <div 
                id="dropZone" 
                class="relative border-2 border-dashed border-gray-200 rounded-lg p-6 transition-all hover:border-primary-500"
                ondrop="handleDrop(event)"
                ondragover="handleDragOver(event)"
                ondragleave="handleDragLeave(event)">
                
                <!-- Upload Prompt -->
                <div id="uploadPrompt" class="text-center">
                    <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-3"></i>
                    <p class="text-gray-600 mb-2">Glissez et déposez vos photos ici</p>
                    <p class="text-gray-400 text-sm mb-3">ou</p>
                    <label class="cursor-pointer">
                        <span class="px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
                            Choisir des fichiers
                        </span>
                        <input 
                            type="file" 
                            id="fileInput" 
                            multiple 
                            accept="image/*" 
                            class="hidden" 
                            onchange="handleFiles(this.files)"
                        >
                    </label>
                </div>

                <!-- Image Preview Grid -->
                <div id="imagePreviewGrid" class="hidden grid grid-cols-2 gap-4 mt-4">
                    <!-- Preview images will be inserted here -->
                </div>
            </div>
        </div>

        <!-- Name Input -->
        <div class="form-group">
            <label class="block text-sm font-medium text-gray-700 mb-2">Nom du chien</label>
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <i class="fas fa-dog text-gray-400"></i>
                </div>
                <input 
                    type="text" 
                    name="name" 
                    required
                    placeholder="Entrez le nom du chien"
                    class="block w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                >
            </div>
        </div>
    </div>
</div>

<!-- Add this JavaScript for image handling -->


<!-- Add these styles to your existing styles -->
<style>
.aspect-square {
    aspect-ratio: 1 / 1;
}

@keyframes fadeScale {
    from {
        opacity: 0;
        transform: scale(0.95);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

.image-preview-enter {
    animation: fadeScale 0.2s ease-out;
}
</style>

                            <!-- Step 3: Location -->
                            <div class="form-step hidden" data-step="3">
                                <div class="mb-8 text-center">
                                    <div class="w-32 h-32 mx-auto bg-primary-100 rounded-full flex items-center justify-center">
                                        <i class="fas fa-location-dot text-5xl text-primary-500"></i>
                                    </div>
                                    <h3 class="mt-4 text-xl font-medium text-gray-900">Localisation</h3>
                                    <p class="mt-2 text-gray-500">Où se trouve le chien ?</p>
                                </div>

                                <div class="max-w-md mx-auto space-y-6">
                                    <div class="form-group">
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Adresse</label>
                                        <div class="relative">
                                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                                <i class="fas fa-map-marker-alt text-gray-400"></i>
                                            </div>
                                            <input 
                                                type="text" 
                                                name="location" 
                                                required
                                                placeholder="Entrez l'adresse"
                                                class="block w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                                            >
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Step 4: Contact Information -->
<div class="form-step hidden" data-step="4">
  <div class="mb-8 text-center">
      <div class="w-32 h-32 mx-auto bg-primary-100 rounded-full flex items-center justify-center">
          <i class="fas fa-address-card text-5xl text-primary-500"></i>
      </div>
      <h3 class="mt-4 text-xl font-medium text-gray-900">Contact</h3>
      <p class="mt-2 text-gray-500">Comment vous contacter ?</p>
  </div>

  <div class="max-w-md mx-auto space-y-6">
      <div class="form-group">
          <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
          <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <i class="fas fa-envelope text-gray-400"></i>
              </div>
              <input 
                  type="email" 
                  name="email" 
                  required
                  placeholder="Entrez votre email"
                  class="block w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              >
          </div>
      </div>

      <div class="form-group">
          <label class="block text-sm font-medium text-gray-700 mb-2">Téléphone (Optionnel)</label>
          <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <i class="fas fa-phone text-gray-400"></i>
              </div>
              <input 
                  type="tel" 
                  name="phone"
                  placeholder="Entrez votre numéro"
                  class="block w-full pl-11 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              >
          </div>
      </div>
  </div>
</div>
</form>
</div>

<!-- Fixed Navigation Footer -->
<div class="p-6 border-t border-gray-100">
  <div class="flex justify-between gap-4">
      <button 
          type="button" 
          onclick="prevStep()" 
          class="prev-btn hidden px-6 py-3 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
          <i class="fas fa-arrow-left mr-2"></i>
          Précédent
      </button>
      
      <button 
          type="button" 
          onclick="nextStep()" 
          class="next-btn ml-auto px-6 py-3 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
          Suivant
          <i class="fas fa-arrow-right ml-2"></i>
      </button>
      
      <button 
          type="submit" 
          form="dogForm"
          class="submit-btn hidden px-6 py-3 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
          <span class="normal-state">
              <i class="fas fa-check mr-2"></i>
              Soumettre
          </span>
          <span class="loading-state hidden">
              <i class="fas fa-circle-notch fa-spin mr-2"></i>
              Envoi en cours...
          </span>
      </button>
  </div>
</div>

</div>
</div>
</div>
</div>
<script>
    const MAX_FILES = 5;
    const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
    let uploadedFiles = new Map(); // Using Map to store file data
    
    function handleDragOver(e) {
        e.preventDefault();
        e.stopPropagation();
        document.getElementById('dropZone').classList.add('border-primary-500', 'bg-primary-50');
    }
    
    function handleDragLeave(e) {
        e.preventDefault();
        e.stopPropagation();
        document.getElementById('dropZone').classList.remove('border-primary-500', 'bg-primary-50');
    }
    
    function handleDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        document.getElementById('dropZone').classList.remove('border-primary-500', 'bg-primary-50');
        
        const files = [...e.dataTransfer.files];
        handleFiles(files);
    }
    
    function handleFiles(files) {
        const validFiles = [...files].filter(file => {
            // Check file type
            if (!file.type.startsWith('image/')) {
                showToast('Seules les images sont acceptées', 'error');
                return false;
            }
            
            // Check file size
            if (file.size > MAX_FILE_SIZE) {
                showToast('Image trop grande. Maximum 5MB', 'error');
                return false;
            }
            
            return true;
        });
    
        // Check total number of files
        if (uploadedFiles.size + validFiles.length > MAX_FILES) {
            showToast(`Maximum ${MAX_FILES} images autorisées`, 'error');
            return;
        }
    
        // Process valid files
        validFiles.forEach(file => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const fileId = Date.now() + Math.random().toString(36).substr(2, 9);
                uploadedFiles.set(fileId, {
                    file: file,
                    preview: e.target.result
                });
                updateImagePreviews();
            };
            reader.readAsDataURL(file);
        });
    }
    
    function updateImagePreviews() {
        const previewGrid = document.getElementById('imagePreviewGrid');
        const uploadPrompt = document.getElementById('uploadPrompt');
        
        if (uploadedFiles.size > 0) {
            previewGrid.classList.remove('hidden');
            uploadPrompt.classList.add('hidden');
            
            // Clear and rebuild preview grid
            previewGrid.innerHTML = '';
            uploadedFiles.forEach((data, fileId) => {
                const previewCard = createPreviewCard(data.preview, fileId);
                previewGrid.appendChild(previewCard);
            });
        } else {
            previewGrid.classList.add('hidden');
            uploadPrompt.classList.remove('hidden');
        }
    }
    
    function createPreviewCard(preview, fileId) {
        const div = document.createElement('div');
        div.className = 'relative aspect-square rounded-lg overflow-hidden group';
        div.innerHTML = `
            <img src="${preview}" class="w-full h-full object-cover" alt="Preview">
            <div class="absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity">
                <button 
                    onclick="removeImage('${fileId}')" 
                    class="absolute top-2 right-2 bg-red-500 text-white rounded-full p-2 hover:bg-red-600 transform hover:scale-110 transition-all"
                >
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        return div;
    }
    
    function removeImage(fileId) {
        uploadedFiles.delete(fileId);
        updateImagePreviews();
    }
    
    // Update form submission to include files
    const originalSubmitHandler = form.onsubmit;
    form.onsubmit = async (e) => {
        e.preventDefault();
        if (!validateCurrentStep()) return;
    
        const formData = new FormData(form);
        
        // Append all files to formData
        uploadedFiles.forEach((data, fileId) => {
            formData.append('images[]', data.file);
        });
    
        // Show loading state
        const submitBtn = document.querySelector('.submit-btn');
        const normalState = submitBtn.querySelector('.normal-state');
        const loadingState = submitBtn.querySelector('.loading-state');
    
        normalState.classList.add('hidden');
        loadingState.classList.remove('hidden');
        submitBtn.disabled = true;
    
        try {
            const response = await fetch('/submit', {
                method: 'POST',
                body: formData
            });
    
            if (response.ok) {
                showToast('Formulaire soumis avec succès!', 'success');
                setTimeout(() => {
                    closeModal();
                }, 1500);
            } else {
                throw new Error('Submission failed');
            }
        } catch (error) {
            showToast('Une erreur est survenue. Veuillez réessayer.', 'error');
        } finally {
            normalState.classList.remove('hidden');
            loadingState.classList.add('hidden');
            submitBtn.disabled = false;
        }
    };
    </script>
<script>
    
// Form state management
let currentStep = 1;
const totalSteps = 4;

// DOM Elements
const modal = document.getElementById('formModal');
const form = document.getElementById('dogForm');
const progressBar = document.querySelector('.form-progress-bar');

// Utility Functions
function updateProgressBar() {
  const progress = ((currentStep - 1) / (totalSteps - 1)) * 100;
  progressBar.style.width = `${progress}%`;
}

function updateStepIndicators() {
  document.querySelectorAll('.step-indicator').forEach((indicator, index) => {
      if (index + 1 === currentStep) {
          indicator.classList.remove('text-gray-400');
          indicator.classList.add('text-primary-600');
      } else if (index + 1 < currentStep) {
          indicator.classList.remove('text-gray-400');
          indicator.classList.add('text-primary-600');
      } else {
          indicator.classList.remove('text-primary-600');
          indicator.classList.add('text-gray-400');
      }
  });
}

function updateButtons() {
  const prevBtn = document.querySelector('.prev-btn');
  const nextBtn = document.querySelector('.next-btn');
  const submitBtn = document.querySelector('.submit-btn');

  prevBtn.classList.toggle('hidden', currentStep === 1);
  nextBtn.classList.toggle('hidden', currentStep === totalSteps);
  submitBtn.classList.toggle('hidden', currentStep !== totalSteps);
}

function showStep(step) {
  document.querySelectorAll('.form-step').forEach(s => {
      s.classList.add('hidden');
  });
  document.querySelector(`.form-step[data-step="${step}"]`).classList.remove('hidden');
}

// Form Navigation
function nextStep() {
  if (!validateCurrentStep()) return;
  
  if (currentStep < totalSteps) {
      currentStep++;
      updateUI();
  }
}

function prevStep() {
  if (currentStep > 1) {
      currentStep--;
      updateUI();
  }
}

function updateUI() {
  showStep(currentStep);
  updateProgressBar();
  updateStepIndicators();
  updateButtons();
}

// Validation
function validateCurrentStep() {
  const currentStepEl = document.querySelector(`.form-step[data-step="${currentStep}"]`);
  const requiredInputs = currentStepEl.querySelectorAll('[required]');
  let isValid = true;

  requiredInputs.forEach(input => {
      removeError(input);
      
      if (!input.value.trim()) {
          showError(input, 'Ce champ est requis');
          isValid = false;
      } else if (input.type === 'email' && !isValidEmail(input.value)) {
          showError(input, 'Email invalide');
          isValid = false;
      }
  });

  // Special validation for step 1 (type selection)
  if (currentStep === 1) {
      const typeSelected = document.querySelector('input[name="type"]:checked');
      if (!typeSelected) {
          showToast('Veuillez sélectionner un type', 'error');
          isValid = false;
      }
  }

  return isValid;
}

function showError(input, message) {
  const formGroup = input.closest('.form-group');
  input.classList.add('border-red-500');
  
  const errorDiv = document.createElement('div');
  errorDiv.className = 'error-message text-red-500 text-sm mt-1';
  errorDiv.innerHTML = `<i class="fas fa-exclamation-circle mr-1"></i>${message}`;
  formGroup.appendChild(errorDiv);
}

function removeError(input) {
  const formGroup = input.closest('.form-group');
  input.classList.remove('border-red-500');
  const errorMessage = formGroup.querySelector('.error-message');
  if (errorMessage) errorMessage.remove();
}

// Modal Management
function openModal() {
  modal.classList.remove('hidden');
  document.body.style.overflow = 'hidden';
}

function closeModal() {
  if (form.dataset.dirty === 'true') {
      if (!confirm('Êtes-vous sûr de vouloir fermer ? Toutes les données seront perdues.')) {
          return;
      }
  }
  
  modal.classList.add('hidden');
  document.body.style.overflow = 'auto';
  resetForm();
}

function resetForm() {
  form.reset();
  currentStep = 1;
  updateUI();
  form.dataset.dirty = 'false';
}

// Form Submission
form.addEventListener('submit', async (e) => {
  e.preventDefault();
  if (!validateCurrentStep()) return;

  const submitBtn = document.querySelector('.submit-btn');
  const normalState = submitBtn.querySelector('.normal-state');
  const loadingState = submitBtn.querySelector('.loading-state');

  // Show loading state
  normalState.classList.add('hidden');
  loadingState.classList.remove('hidden');
  submitBtn.disabled = true;

  try {
      const formData = new FormData(form);

      const response = await fetch('/submit', {
          method: 'POST',
          body: formData
      });

      if (response.ok) {
          showToast('Formulaire soumis avec succès!', 'success');
          setTimeout(() => {
              closeModal();
          }, 1500);
      } else {
          throw new Error('Submission failed');
      }
  } catch (error) {
      showToast('Une erreur est survenue. Veuillez réessayer.', 'error');
  } finally {
      normalState.classList.remove('hidden');
      loadingState.classList.add('hidden');
      submitBtn.disabled = false;
  }
});

// Toast Notifications
function showToast(message, type = 'success') {
  const toast = document.createElement('div');
  toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg text-white font-medium animate-fade-in
      ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
  
  toast.innerHTML = `
      <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
      ${message}
  `;
  
  document.body.appendChild(toast);
  
  setTimeout(() => {
      toast.classList.add('fade-out');
      setTimeout(() => toast.remove(), 300);
  }, 3000);
}

// Utility Functions
function isValidEmail(email) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

// Event Listeners
document.addEventListener('DOMContentLoaded', () => {
  // Initialize form
  updateUI();

  // Form dirty state tracking
  form.addEventListener('input', () => {
      form.dataset.dirty = 'true';
  });

  // Close modal on outside click
  modal.addEventListener('click', (e) => {
      if (e.target === modal) {
          closeModal();
      }
  });
});
</script>

</body>
</html>