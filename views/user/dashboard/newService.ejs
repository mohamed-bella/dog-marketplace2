<!DOCTYPE html>
<html lang="fr">
<head>
    <%- include('../include/head.ejs') %>
    <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
    <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
    <%- include('../include/navbar.ejs') %>

    <main class="py-12">
        <div class="max-w-5xl mx-auto px-4">
            <!-- Back Button -->
            <a href="/dashboard" class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-8">
                <i class="fas fa-arrow-left"></i>
                <span>Retour au tableau de bord</span>
            </a>

            <!-- Main Form Container -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
                <!-- Steps Progress -->
                <div class="flex justify-between mb-12 relative">
                    <div class="absolute top-1/2 left-0 right-0 h-0.5 bg-gray-200 -translate-y-1/2"></div>
                    <% const steps = ['Type', 'Informations', 'Photos']; %>
                    <% steps.forEach((step, index) => { %>
                        <div class="relative flex flex-col items-center gap-2">
                            <div class="w-10 h-10 rounded-full bg-white border-2 border-gray-300 flex items-center justify-center z-10 step-indicator" data-step="<%= index + 1 %>">
                                <span class="font-medium"><%= index + 1 %></span>
                            </div>
                            <span class="text-sm font-medium"><%= step %></span>
                        </div>
                    <% }); %>
                </div>

                <!-- Form -->
                <form id="serviceForm" class="space-y-8">
                    <!-- Step 1: Service Type -->
                    <div class="step" data-step="1">
                        <div class="grid grid-cols-2 sm:grid-cols-3 gap-4">
                            <% const services = [
                                { id: 'dressage', name: 'Dressage', icon: 'üêï' },
                                { id: 'toilettage', name: 'Toilettage', icon: '‚úÇÔ∏è' },
                                { id: 'promenade', name: 'Promenade', icon: 'ü¶Æ' },
                                { id: 'veterinaire', name: 'V√©t√©rinaire', icon: '‚öïÔ∏è' },
                                { id: 'pension', name: 'Pension', icon: 'üè†' },
                                { id: 'transport', name: 'Transport', icon: 'üöó' }
                            ]; %>
                            <% services.forEach(service => { %>
                                <label class="cursor-pointer group">
                                    <input type="radio" name="serviceType" value="<%= service.id %>" class="hidden peer">
                                    <div class="p-6 rounded-xl border-2 border-gray-200 peer-checked:border-gray-800 peer-checked:bg-gray-50 transition-all">
                                        <div class="flex flex-col items-center gap-4">
                                            <span class="text-3xl"><%= service.icon %></span>
                                            <span class="font-medium"><%= service.name %></span>
                                        </div>
                                    </div>
                                </label>
                            <% }); %>
                        </div>
                    </div>

                    <!-- Step 2: Service Details -->
                    <div class="step hidden" data-step="2">
                        <div class="space-y-6">
                            <div class="form-group">
                                <label class="block font-medium mb-2">Nom du service</label>
                                <input type="text" name="serviceName" required
                                       class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-gray-800 focus:ring-1 focus:ring-gray-800">
                            </div>

                            <div class="form-group">
                                <label class="block font-medium mb-2">Prix minimum (DH)</label>
                                <input type="number" name="minPrice" required min="0"
                                       class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-gray-800 focus:ring-1 focus:ring-gray-800">
                            </div>

                            <div class="form-group">
                                <label class="block font-medium mb-2">Description</label>
                                <textarea name="description" rows="4" required
                                          class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-gray-800 focus:ring-1 focus:ring-gray-800"></textarea>
                            </div>

                            <div class="form-group">
                                <label class="block font-medium mb-2">Num√©ro de t√©l√©phone</label>
                                <div class="relative">
                                    <span class="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500">+212</span>
                                    <input type="tel" name="serviceNumber" required
                                           pattern="[0-9]{9}" maxlength="9"
                                           class="w-full pl-16 pr-4 py-3 rounded-lg border border-gray-300 focus:border-gray-800 focus:ring-1 focus:ring-gray-800">
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="block font-medium mb-2">Ville</label>
                                <select name="location" required
                                        class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-gray-800 focus:ring-1 focus:ring-gray-800">
                                    <%  const cities=[ 'Casablanca - ÿßŸÑÿØÿßÿ± ÿßŸÑÿ®Ÿäÿ∂ÿßÿ°' , 'Rabat - ÿßŸÑÿ±ÿ®ÿßÿ∑' , 'Sal√© - ÿ≥ŸéŸÑŸéÿß', 'Marrakech - ŸÖÿ±ÿßŸÉÿ¥' , 'Agadir - ÿ£ŸÉÿßÿØŸäÿ±' , 'Tanger - ÿ∑ŸÜÿ¨ÿ©' , 'F√®s - ŸÅÿßÿ≥' , 'T√©touan - ÿ™ÿ∑ŸàÿßŸÜ' , 'Mekn√®s - ŸÖŸÉŸÜÿßÿ≥' , 'Oujda - Ÿàÿ¨ÿØÿ©' , 'Asfi - ÿ¢ÿ≥ŸÅŸä' , 'Kenitra - ÿßŸÑŸÇŸÜŸäÿ∑ÿ±ÿ©' , 'Mohamm√©dia - ÿßŸÑŸÖÿ≠ŸÖÿØŸäÿ©' , 'La√¢youne - ÿßŸÑÿπŸäŸàŸÜ' , 'B√©ni Mellal - ÿ®ŸÜŸä ŸÖŸÑÿßŸÑ' , 'Nador - ÿßŸÑŸÜÿßÿ∏Ÿàÿ±' , 'Settat - ÿ≥ÿ∑ÿßÿ™' , 'Safi - ÿßŸÑÿµŸàŸäÿ±ÿ©' , 'Errachidia - ÿßŸÑÿ±ÿ¥ŸäÿØŸäÿ©' , 'Khouribga - ÿÆÿ±Ÿäÿ®ŸÉÿ©' , 'El Jadida - ÿßŸÑÿ¨ÿØŸäÿØÿ©' , 'Taza - ÿ™ÿßÿ≤ÿ©' , 'Ksar El-K√©bir - ÿßŸÑŸÇÿµÿ± ÿßŸÑŸÉÿ®Ÿäÿ±' , 'Larache - ÿßŸÑÿπÿ±ÿßÿ¶ÿ¥' , 'Berkane - ÿ®ÿ±ŸÉÿßŸÜ' , 'Taourirt - ÿ™ÿßŸàÿ±Ÿäÿ±ÿ™' , 'Guercif - ÿ¨ÿ±ÿ≥ŸäŸÅ' , 'Youssoufia - ÿßŸÑŸäŸàÿ≥ŸÅŸäÿ©' , 'Sidi Kacem - ÿ≥ŸäÿØŸä ŸÇÿßÿ≥ŸÖ' , 'Khenifra - ÿÆŸÜŸäŸÅÿ±ÿ©' , 'Guelmim - ŸÉŸÑŸÖŸäŸÖ' , 'Tan-Tan - ÿ∑ÿßŸÜÿ∑ÿßŸÜ' , 'Sidi Bennour - ÿ≥ŸäÿØŸä ÿ®ŸÜŸàÿ±' , 'Boujdour - ÿ®Ÿàÿ¨ÿØŸàÿ±' , 'Tarfaya - ÿ∑ÿ±ŸÅÿßŸäÿ©' , 'Azilal - ÿ£ÿ≤ŸäŸÑÿßŸÑ' , 'Chichaoua - ÿ¥Ÿäÿ¥ÿßŸàÿ©' , 'Fquih Ben Salah - ÿßŸÑŸÅŸÇŸäŸá ÿ®ŸÜ ÿµÿßŸÑÿ≠' , 'Taroudant - ÿ™ÿßÿ±ŸàÿØÿßŸÜÿ™' , 'Ouazzane - Ÿàÿ≤ÿßŸÜ' , 'Ifrane - ÿ•ŸÅÿ±ÿßŸÜ' , 'Sefrou - ÿµŸÅÿ±Ÿà' , 'Benslimane - ÿ®ŸÜÿ≥ŸÑŸäŸÖÿßŸÜ' , 'Midelt - ŸÖŸäÿØŸÑÿ™' , 'Al Hoceima - ÿßŸÑÿ≠ÿ≥ŸäŸÖÿ©' , 'Zagora - ÿ≤ÿßŸÉŸàÿ±ÿ©' , 'Ouarzazate - Ÿàÿ±ÿ≤ÿßÿ≤ÿßÿ™' , 'Sidi Ifni - ÿ≥ŸäÿØŸä ÿ•ŸÅŸÜŸä' , 'Boulemane - ÿ®ŸàŸÑŸÖÿßŸÜ' , 'Chefchaouen - ÿ¥ŸÅÿ¥ÿßŸàŸÜ' , 'Dakhla - ÿßŸÑÿØÿßÿÆŸÑÿ©' , 'Jerada - ÿ¨ÿ±ÿßÿØÿ©' , 'Fnideq - ÿßŸÑŸÅŸÜŸäÿØŸÇ' , 'Martil - ŸÖÿ±ÿ™ŸäŸÑ' , 'Sidi Slimane - ÿ≥ŸäÿØŸä ÿ≥ŸÑŸäŸÖÿßŸÜ' , 'Imintanoute - ÿ•ŸäŸÖŸäŸÜÿ™ÿßŸÜŸàÿ™' , 'Oulad Teima - ÿ£ŸàŸÑÿßÿØ ÿ™ÿßŸäŸÖÿ©' , 'Temara - ÿ™ŸÖÿßÿ±ÿ©' , 'El Hajeb - ÿßŸÑÿ≠ÿßÿ¨ÿ®' , 'Ait Melloul - ÿ£Ÿäÿ™ ŸÖŸÑŸàŸÑ' , 'Bouskoura - ÿ®Ÿàÿ≥ŸÉŸàÿ±ÿ©' , 'Ain Harrouda - ÿπŸäŸÜ ÿ≠ÿ±ŸàÿØÿ©' , 'Tit Mellil - ÿ™Ÿäÿ∑ ŸÖŸÑŸäŸÑ' , 'Ouled Tayeb - ÿ£ŸàŸÑÿßÿØ ÿ∑Ÿäÿ®' , 'Bouznika - ÿ®Ÿàÿ≤ŸÜŸäŸÇÿ©' , 'Sidi Bou Othmane - ÿ≥ŸäÿØŸä ÿ®Ÿàÿπÿ´ŸÖÿßŸÜ' , 'Ait Ourir - ÿ£Ÿäÿ™ ÿ£Ÿàÿ±Ÿäÿ±' , 'Dar Bouazza - ÿØÿßÿ± ÿ®Ÿàÿπÿ≤ÿ©' , 'Moulay Yacoub - ŸÖŸàŸÑÿßŸä ŸäÿπŸÇŸàÿ®' , 'Aghbala - ÿ£ÿ∫ÿ®ÿßŸÑÿ©' , 'Boumia - ÿ®ŸàŸÖŸäÿ©' , 'Asilah - ÿ£ÿµŸäŸÑÿ©' , 'Anza - ÿ£ŸÜÿ≤ÿß' , 'Inezgane - ÿ•ŸÜÿ≤ŸÉÿßŸÜ' , 'Tiznit - ÿ™ÿ≤ŸÜŸäÿ™' , 'Skhirat - ÿßŸÑÿµÿÆŸäÿ±ÿßÿ™' , 'Sidi Yahya El Gharb - ÿ≥ŸäÿØŸä Ÿäÿ≠ŸäŸâ ÿßŸÑÿ∫ÿ±ÿ®' , 'Bouarfa - ÿ®Ÿàÿπÿ±ŸÅÿ©' , 'Tinghir - ÿ™ŸÜÿ∫Ÿäÿ±' , 'Zaio - ÿ≤ÿßŸäŸà' , 'Ahfir - ÿ£ÿ≠ŸÅŸäÿ±' , 'Sidi Allal Tazi - ÿ≥ŸäÿØŸä ÿπŸÑÿßŸÑ ÿßŸÑÿ™ÿßÿ≤Ÿä' , 'Ben Guerir - ÿ®ŸÜ ÿ¨ÿ±Ÿäÿ±' , 'Jorf Lasfar - ÿßŸÑÿ¨ÿ±ŸÅ ÿßŸÑÿ£ÿµŸÅÿ±' , 'Dar Gueddari - ÿØÿßÿ± ÿßŸÑŸÉÿØÿßÿ±Ÿä' , 'Sidi Taibi - ÿ≥ŸäÿØŸä ÿßŸÑÿ∑Ÿäÿ®Ÿä' , 'Sidi Bennour - ÿ≥ŸäÿØŸä ÿ®ŸÜŸàÿ±' , 'Aourir - ÿ£Ÿàÿ±Ÿäÿ±' , 'Tamansourt - ÿ™ÿßŸÖŸÜÿ≥Ÿàÿ±ÿ™' , 'Had Soualem - ÿ≠ÿØ ÿßŸÑÿ≥ŸàÿßŸÑŸÖ' , 'Beni Yakhlef - ÿ®ŸÜŸä ŸäÿÆŸÑŸÅ' , 'Massa - ŸÖÿ≥ÿ©' , 'Sidi Rahal - ÿ≥ŸäÿØŸä ÿ±ÿ≠ÿßŸÑ' , 'Demnate - ÿØŸÖŸÜÿßÿ™' , 'Bouznika - ÿ®Ÿàÿ≤ŸÜŸäŸÇÿ©' , 'Tamellalt - ÿ™ŸÖŸÑÿßŸÑÿ™' , 'Bouabout Ait Boufoulen - ÿ®Ÿàÿπÿ®ŸàÿØ ÿ£Ÿäÿ™ ÿ®ŸàŸÅŸàŸÑŸÜ' , 'Oulad Ayad - ÿ£ŸàŸÑÿßÿØ ÿπŸäÿßÿØ' , 'El Kelaa des Sraghna - ŸÇŸÑÿπÿ© ÿßŸÑÿ≥ÿ±ÿßÿ∫ŸÜÿ©' , 'Beja√¢d - ÿ®ÿ¶ÿ± ÿßŸÑÿ≠ÿØ' , 'Tamesna - ÿ™ÿßŸÖÿ≥ŸÜÿß' , 'El Borouj - ÿßŸÑÿ®ÿ±Ÿàÿ¨' , 'Ouled Frej - ÿ£ŸàŸÑÿßÿØ ŸÅÿ±ÿ¨' , 'Moulay Bousselham - ŸÖŸàŸÑÿßŸä ÿ®Ÿàÿ≥ŸÑŸáÿßŸÖ' , 'Azemmour - ÿ£ÿ≤ŸÖŸàÿ±' , 'Bni Tadjite - ÿ®ŸÜŸä ÿ™ÿ¨Ÿäÿ™' , 'Ait Baha - ÿ£Ÿäÿ™ ÿ®Ÿáÿß' , 'Sidi Yahya Zaer - ÿ≥ŸäÿØŸä Ÿäÿ≠ŸäŸâ ÿ≤ÿπŸäÿ±' , 'Sidi Moussa - ÿ≥ŸäÿØŸä ŸÖŸàÿ≥Ÿâ' ];%> %>
                                        <option value="">S√©lectionnez une ville</option>
                                    <% cities.forEach(city => { %>
                                        <option value="<%= city %>"><%= city %></option>
                                    <% }); %>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Photos -->
                    <div class="step hidden" data-step="3">
                        <div class="space-y-6">
                            <div class="form-group">
                                <label class="block font-medium mb-4">Photos du service</label>
                                <input type="file" class="filepond" name="serviceImages" multiple>
                            </div>
                        </div>
                    </div>

                    <!-- Navigation -->
                    <div class="flex justify-between pt-8 border-t">
                        <button type="button" id="prevBtn" class="hidden px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
                            Pr√©c√©dent
                        </button>
                        <button type="button" id="nextBtn" class="ml-auto px-6 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800">
                            Suivant
                        </button>
                        <button type="submit" id="submitBtn" class="hidden ml-auto px-6 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800">
                            Cr√©er le service
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <!-- < %- include('../partials/footer') %> -->

    <!-- Scripts -->
    <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
    <script src="https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js"></script>
    <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let currentStep = 1;
            const form = document.getElementById('serviceForm');
            const steps = document.querySelectorAll('.step');
            const indicators = document.querySelectorAll('.step-indicator');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');
        
            // Initialize FilePond
            FilePond.registerPlugin(FilePondPluginImagePreview, FilePondPluginFileValidateType);
            const pond = FilePond.create(document.querySelector('.filepond'), {
                allowMultiple: true,
                maxFiles: 5,
                acceptedFileTypes: ['image/*'],
                server: {
                    process: {
                        url: '/services/upload-temp',
                        method: 'POST',
                        withCredentials: false,
                        onload: (response) => {
                            const data = JSON.parse(response);
                            return data.uploadedFiles[0]?.url; // Return uploaded image URL
                        },
                        onerror: (response) => {
                            console.error('Upload error:', response);
                            return response.data;
                        },
                    },
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.content,
                    },
                },
            });
        
            function showStep(step) {
                // Hide all steps
                steps.forEach(s => s.classList.add('hidden'));
                // Show current step
                steps[step - 1].classList.remove('hidden');
        
                // Update indicators
                indicators.forEach((indicator, index) => {
                    if (index < step) {
                        indicator.classList.add('border-gray-800', 'bg-gray-800', 'text-white');
                    } else {
                        indicator.classList.remove('border-gray-800', 'bg-gray-800', 'text-white');
                    }
                });
        
                // Update navigation buttons
                prevBtn.classList.toggle('hidden', step === 1);
                nextBtn.classList.toggle('hidden', step === steps.length);
                submitBtn.classList.toggle('hidden', step !== steps.length);
            }
        
            function validateStep(step) {
                const currentStepEl = steps[step - 1];
                
                // Step 1: Service Type validation
                if (step === 1) {
                    const selectedService = currentStepEl.querySelector('input[name="serviceType"]:checked');
                    if (!selectedService) {
                        alert('Veuillez s√©lectionner un type de service');
                        return false;
                    }
                    return true;
                }
        
                // Step 2: Form fields validation
                if (step === 2) {
                    const requiredFields = currentStepEl.querySelectorAll('[required]');
                    let isValid = true;
                    
                    requiredFields.forEach(field => {
                        if (!field.value.trim()) {
                            field.classList.add('border-red-500');
                            isValid = false;
                        } else {
                            field.classList.remove('border-red-500');
                        }
                    });
        
                    if (!isValid) {
                        alert('Veuillez remplir tous les champs requis');
                        return false;
                    }
                    return true;
                }
        
                // Step 3: Photos validation
                if (step === 3) {
                    if (pond.getFiles().length === 0) {
                        alert('Veuillez ajouter au moins une photo');
                        return false;
                    }
                    return true;
                }
        
                return true;
            }
        
            // Navigation event listeners
            nextBtn.addEventListener('click', () => {
                if (validateStep(currentStep)) {
                    currentStep++;
                    showStep(currentStep);
                    window.scrollTo(0, 0);
                }
            });
        
            prevBtn.addEventListener('click', () => {
                currentStep--;
                showStep(currentStep);
                window.scrollTo(0, 0);
            });
        
            // Form submission
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
        
                if (!validateStep(currentStep)) {
                    return;
                }
        
                try {
                    const formData = new FormData(this);
        
                    // Add uploaded files' URLs to form data
                    const files = pond.getFiles();
                    const fileUrls = files.map(file => file.serverId);
                    if (fileUrls.length > 0) {
                        formData.append('serviceImages', JSON.stringify(fileUrls));
                    }
        
                    const response = await fetch('/services/add', {
                        method: 'POST',
                        body: formData,
                    });
        
                    const result = await response.json();
        
                    if (response.ok) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Service cr√©√© avec succ√®s!',
                            text: 'Redirection vers le tableau de bord...',
                            showConfirmButton: false,
                            timer: 1500,
                        });
        
                        window.location.href = '/dashboard';
                    } else {
                        throw new Error(result.message || 'Une erreur est survenue');
                    }
                } catch (error) {
                    console.error('Error submitting form:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Erreur',
                        text: error.message || 'Une erreur est survenue lors de la cr√©ation du service',
                    });
                }
            });
        
            // Initialize the first step
            showStep(1);
        
            // Add visual feedback for service selection
            const serviceOptions = document.querySelectorAll('input[name="serviceType"]');
            serviceOptions.forEach(option => {
                option.addEventListener('change', function() {
                    serviceOptions.forEach(opt => {
                        opt.parentElement.querySelector('div').classList.remove('border-gray-800', 'bg-gray-50');
                    });
                    if (this.checked) {
                        this.parentElement.querySelector('div').classList.add('border-gray-800', 'bg-gray-50');
                    }
                });
            });
        });
        </script>
        
</body>
</html>